[38;2;34;187;51m
                   .0MO.                                    
                   OMMMx                                    
                   ;NMX;                                    
                    ...           ...              ....     
WMMMd     cWMMM0.  KMMMO      ;xKWMMMMNOc.     ,xXMMMMMWXkc.
WMMMd   .0MMMN:    KMMMO    :XMMMMMMMMMMMWl   xMMMMMWMMMMMMl
WMMMd  lWMMMO.     KMMMO   xMMMMKc...'lXMk   ,MMMMx   .;dXx 
WMMMd.0MMMX;       KMMMO  cMMMMd        '    'MMMMNl'       
WMMMNWMMMMl        KMMMO  0MMMN               oMMMMMMMXkl.  
WMMMMMMMMMMo       KMMMO  0MMMX                .ckKWMMMMMM0.
WMMMMWokMMMMk      KMMMO  oMMMMc              .     .:OMMMM0
WMMMK.  dMMMM0.    KMMMO   KMMMMx'    ,kNc   :WOc.    .NMMMX
WMMMd    cWMMMX.   KMMMO    kMMMMMWXNMMMMMd .WMMMMWKO0NMMMMl
WMMMd     ,NMMMN,  KMMMO     'xNMMMMMMMNx,   .l0WMMMMMMMWk, 
xkkk:      ,kkkkx  okkkl        ;xKXKx;          ;dOKKkc    

[0m
Scanning with Keeping Infrastructure as Code Secure v1.6.5



Files scanned: 1
Parsed files: 1
Queries loaded: 1039
Queries failed to execute: 0

------------------------------------

[38;2;91;192;222mSecurity Group Rule Without Description[0m, Severity: [38;2;91;192;222mINFO[0m, Results: 2
[1mDescription:[0m It's considered a best practice for all rules in AWS Security Group to have a description
[1mPlatform:[0m Terraform

	[38;2;91;192;222m[1]:[0m ../../src/main.tf:[38;2;34;187;51m55[0m

		054: 
[38;2;240;173;78m		055:   egress {
[0m		056:     from_port   = 0


	[38;2;91;192;222m[2]:[0m ../../src/main.tf:[38;2;34;187;51m62[0m

		061: 
[38;2;240;173;78m		062:   ingress {
[0m		063:     from_port   = 0


[38;2;91;192;222mResource Not Using Tags[0m, Severity: [38;2;91;192;222mINFO[0m, Results: 8
[1mDescription:[0m AWS services resource tags are an essential part of managing components. As a best practice, the field 'tags' should have additional tags defined other than 'Name'
[1mPlatform:[0m Terraform

	[38;2;91;192;222m[1]:[0m ../../src/main.tf:[38;2;34;187;51m87[0m

		086: 
[38;2;240;173;78m		087: resource "aws_instance" "test-ec2-instance" {
[0m		088:   ami = data.aws_ami.ubuntu.id


	[38;2;91;192;222m[2]:[0m ../../src/main.tf:[38;2;34;187;51m107[0m

		106: 
[38;2;240;173;78m		107: resource "aws_internet_gateway" "igw" {
[0m		108:   vpc_id = aws_vpc.main.id


	[38;2;91;192;222m[3]:[0m ../../src/main.tf:[38;2;34;187;51m50[0m

		049: 
[38;2;240;173;78m		050: resource "aws_security_group" "public-internet-sg" {
[0m		051:   name        = "public-internet-sg"


	[38;2;91;192;222m[4]:[0m ../../src/main.tf:[38;2;34;187;51m12[0m

		011: 
[38;2;240;173;78m		012: resource "aws_vpc" "main" {
[0m		013:   cidr_block = local.cidr_block


	[38;2;91;192;222m[5]:[0m ../../src/main.tf:[38;2;34;187;51m22[0m

		021: 
[38;2;240;173;78m		022:   tags = {
[0m		023:     Name = "public-subnet"


	[38;2;91;192;222m[6]:[0m ../../src/main.tf:[38;2;34;187;51m103[0m

		102: 
[38;2;240;173;78m		103: resource "aws_sqs_queue" "test-queue" {
[0m		104:   name = "test-queue"


	[38;2;91;192;222m[7]:[0m ../../src/main.tf:[38;2;34;187;51m94[0m

		093: 
[38;2;240;173;78m		094: resource "aws_vpc_endpoint" "sqs-vpc-endpoint" {
[0m		095:   vpc_id            = aws_vpc.main.id


	[38;2;91;192;222m[8]:[0m ../../src/main.tf:[38;2;34;187;51m40[0m

		039: 
[38;2;240;173;78m		040:   tags = {
[0m		041:     Name = "public-rtb"


[38;2;91;192;222mName Is Not Snake Case[0m, Severity: [38;2;91;192;222mINFO[0m, Results: 7
[1mDescription:[0m All names should follow snake case pattern.
[1mPlatform:[0m Terraform

	[38;2;91;192;222m[1]:[0m ../../src/main.tf:[38;2;34;187;51m87[0m

		086: 
[38;2;240;173;78m		087: resource "aws_instance" "test-ec2-instance" {
[0m		088:   ami = data.aws_ami.ubuntu.id


	[38;2;91;192;222m[2]:[0m ../../src/main.tf:[38;2;34;187;51m45[0m

		044: 
[38;2;240;173;78m		045: resource "aws_route_table_association" "public-rtb-assoc" {
[0m		046:   subnet_id      = aws_subnet.public-subnet.id


	[38;2;91;192;222m[3]:[0m ../../src/main.tf:[38;2;34;187;51m94[0m

		093: 
[38;2;240;173;78m		094: resource "aws_vpc_endpoint" "sqs-vpc-endpoint" {
[0m		095:   vpc_id            = aws_vpc.main.id


	[38;2;91;192;222m[4]:[0m ../../src/main.tf:[38;2;34;187;51m27[0m

		026: 
[38;2;240;173;78m		027: resource "aws_route_table" "public-rtb" {
[0m		028:   vpc_id = aws_vpc.main.id


	[38;2;91;192;222m[5]:[0m ../../src/main.tf:[38;2;34;187;51m103[0m

		102: 
[38;2;240;173;78m		103: resource "aws_sqs_queue" "test-queue" {
[0m		104:   name = "test-queue"


	[38;2;91;192;222m[6]:[0m ../../src/main.tf:[38;2;34;187;51m18[0m

		017: 
[38;2;240;173;78m		018: resource "aws_subnet" "public-subnet" {
[0m		019:   vpc_id     = aws_vpc.main.id


	[38;2;91;192;222m[7]:[0m ../../src/main.tf:[38;2;34;187;51m50[0m

		049: 
[38;2;240;173;78m		050: resource "aws_security_group" "public-internet-sg" {
[0m		051:   name        = "public-internet-sg"


[38;2;91;192;222mEC2 Not EBS Optimized[0m, Severity: [38;2;91;192;222mINFO[0m, Results: 1
[1mDescription:[0m It's considered a best practice for an EC2 instance to use an EBS optimized instance. This provides the best performance for your EBS volumes by minimizing contention between Amazon EBS I/O and other traffic from your instance
[1mPlatform:[0m Terraform

	[38;2;91;192;222m[1]:[0m ../../src/main.tf:[38;2;34;187;51m87[0m

		086: 
[38;2;240;173;78m		087: resource "aws_instance" "test-ec2-instance" {
[0m		088:   ami = data.aws_ami.ubuntu.id


[38;2;91;192;222mEC2 Instance Monitoring Disabled[0m, Severity: [38;2;91;192;222mINFO[0m, Results: 1
[1mDescription:[0m EC2 Instance should have detailed monitoring enabled. With detailed monitoring enabled data is available in 1-minute periods
[1mPlatform:[0m Terraform

	[38;2;91;192;222m[1]:[0m ../../src/main.tf:[38;2;34;187;51m87[0m

		086: 
[38;2;240;173;78m		087: resource "aws_instance" "test-ec2-instance" {
[0m		088:   ami = data.aws_ami.ubuntu.id


[38;2;237;213;126mVPC FlowLogs Disabled[0m, Severity: [38;2;237;213;126mLOW[0m, Results: 1
[1mDescription:[0m Every VPC resource should have an associated Flow Log
[1mPlatform:[0m Terraform

	[38;2;237;213;126m[1]:[0m ../../src/main.tf:[38;2;34;187;51m12[0m

		011: 
[38;2;240;173;78m		012: resource "aws_vpc" "main" {
[0m		013:   cidr_block = local.cidr_block


[38;2;237;213;126mIAM Access Analyzer Not Enabled[0m, Severity: [38;2;237;213;126mLOW[0m, Results: 1
[1mDescription:[0m IAM Access Analyzer should be enabled and configured to continuously monitor resource permissions
[1mPlatform:[0m Terraform

	[38;2;237;213;126m[1]:[0m ../../src/main.tf:[38;2;34;187;51m12[0m

		011: 
[38;2;240;173;78m		012: resource "aws_vpc" "main" {
[0m		013:   cidr_block = local.cidr_block


[38;2;255;114;19mVPC Without Network Firewall[0m, Severity: [38;2;255;114;19mMEDIUM[0m, Results: 1
[1mDescription:[0m VPC should have a Network Firewall associated
[1mPlatform:[0m Terraform

	[38;2;255;114;19m[1]:[0m ../../src/main.tf:[38;2;34;187;51m12[0m

		011: 
[38;2;240;173;78m		012: resource "aws_vpc" "main" {
[0m		013:   cidr_block = local.cidr_block


[38;2;255;114;19mSQS With SSE Disabled[0m, Severity: [38;2;255;114;19mMEDIUM[0m, Results: 1
[1mDescription:[0m Amazon Simple Queue Service (SQS) queue should protect the contents of their messages using Server-Side Encryption (SSE)
[1mPlatform:[0m Terraform

	[38;2;255;114;19m[1]:[0m ../../src/main.tf:[38;2;34;187;51m103[0m

		102: 
[38;2;240;173;78m		103: resource "aws_sqs_queue" "test-queue" {
[0m		104:   name = "test-queue"


[38;2;255;114;19mSQS VPC Endpoint Without DNS Resolution[0m, Severity: [38;2;255;114;19mMEDIUM[0m, Results: 1
[1mDescription:[0m SQS VPC Endpoint should have DNS resolution enabled
[1mPlatform:[0m Terraform

	[38;2;255;114;19m[1]:[0m ../../src/main.tf:[38;2;34;187;51m95[0m

		094: resource "aws_vpc_endpoint" "sqs-vpc-endpoint" {
[38;2;240;173;78m		095:   vpc_id            = aws_vpc.main.id
[0m		096:   service_name      = "com.amazonaws.${local.region}.sqs"


[38;2;187;33;36mEC2 Instance Has Public IP[0m, Severity: [38;2;187;33;36mHIGH[0m, Results: 1
[1mDescription:[0m EC2 Instance should not have a public IP address.
[1mPlatform:[0m Terraform

	[38;2;187;33;36m[1]:[0m ../../src/main.tf:[38;2;34;187;51m87[0m

		086: 
[38;2;240;173;78m		087: resource "aws_instance" "test-ec2-instance" {
[0m		088:   ami = data.aws_ami.ubuntu.id



Results Summary:
[38;2;187;33;36mHIGH[0m: 1
[38;2;255;114;19mMEDIUM[0m: 3
[38;2;237;213;126mLOW[0m: 2
[38;2;91;192;222mINFO[0m: 19
TOTAL: 25

Scan duration: 15.026155341s
