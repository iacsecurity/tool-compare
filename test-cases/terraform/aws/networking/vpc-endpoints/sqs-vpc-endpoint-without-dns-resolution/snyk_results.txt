Failed to run the process ...
{
  "meta": {
    "isPrivate": true,
    "isLicensesEnabled": false,
    "ignoreSettings": null,
    "org": "ryder.d",
    "projectId": "",
    "policy": ""
  },
  "filesystemPolicy": false,
  "vulnerabilities": [],
  "dependencyCount": 0,
  "licensesPolicy": null,
  "ignoreSettings": null,
  "targetFile": "main.tf",
  "projectName": "project",
  "org": "ryder.d",
  "policy": "",
  "isPrivate": true,
  "targetFilePath": "/project/main.tf",
  "packageManager": "terraformconfig",
  "path": "/project",
  "projectType": "terraformconfig",
  "ok": false,
  "infrastructureAsCodeIssues": [
    {
      "severity": "low",
      "resolve": "Set `metadata_options.http_tokens` attribute to `required`",
      "id": "SNYK-CC-TF-130",
      "impact": "Metadata service may be vulnerable to reverse proxy/open firewall misconfigurations and server side request forgery attacks",
      "msg": "resource.aws_instance[test-ec2-instance].metadata_options",
      "subType": "EC2",
      "issue": "Instance Metadata Service v2 is not enforced",
      "publicId": "SNYK-CC-TF-130",
      "title": "EC2 instance accepts IMDSv1",
      "references": [
        "https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/configuring-instance-metadata-service.html",
        "https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-metadata.html",
        "https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instancedata-data-retrieval.html",
        "https://aws.amazon.com/blogs/security/defense-in-depth-open-firewalls-reverse-proxies-ssrf-vulnerabilities-ec2-instance-metadata-service/"
      ],
      "isIgnored": false,
      "iacDescription": {
        "issue": "Instance Metadata Service v2 is not enforced",
        "impact": "Metadata service may be vulnerable to reverse proxy/open firewall misconfigurations and server side request forgery attacks",
        "resolve": "Set `metadata_options.http_tokens` attribute to `required`"
      },
      "lineNumber": 87,
      "documentation": "https://snyk.io/security-rules/SNYK-CC-TF-130",
      "isGeneratedByCustomRule": false,
      "path": [
        "resource",
        "aws_instance[test-ec2-instance]",
        "metadata_options"
      ]
    },
    {
      "severity": "low",
      "resolve": "Set `disable_api_termination` attribute  with value `true`",
      "id": "SNYK-CC-AWS-426",
      "impact": "Without this setting enabled the instances can be terminated by accident. This setting should only be used for instances with high availability requirements. Enabling this may prevent IaC workflows from updating the instance, for example terraform will not be able to terminate the instance to update instance type",
      "msg": "resource.aws_instance[test-ec2-instance].disable_api_termination",
      "remediation": {
        "cloudformation": "Set `DisableApiTermination` attribute with value `true`",
        "terraform": "Set `disable_api_termination` attribute  with value `true`"
      },
      "subType": "EC2",
      "issue": "To prevent instance from being accidentally terminated using Amazon EC2, you can enable termination protection for the instance",
      "publicId": "SNYK-CC-AWS-426",
      "title": "EC2 API termination protection is not enabled",
      "references": [
        "https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/terminating-instances.html#Using_ChangingDisableAPITermination"
      ],
      "isIgnored": false,
      "iacDescription": {
        "issue": "To prevent instance from being accidentally terminated using Amazon EC2, you can enable termination protection for the instance",
        "impact": "Without this setting enabled the instances can be terminated by accident. This setting should only be used for instances with high availability requirements. Enabling this may prevent IaC workflows from updating the instance, for example terraform will not be able to terminate the instance to update instance type",
        "resolve": "Set `disable_api_termination` attribute  with value `true`"
      },
      "lineNumber": 87,
      "documentation": "https://snyk.io/security-rules/SNYK-CC-AWS-426",
      "isGeneratedByCustomRule": false,
      "path": [
        "resource",
        "aws_instance[test-ec2-instance]",
        "disable_api_termination"
      ]
    },
    {
      "severity": "medium",
      "resolve": "Set `root_block_device.encrypted` attribute to `true`",
      "id": "SNYK-CC-TF-53",
      "impact": "That should someone gain unauthorized access to the data they would be able to read the contents.",
      "msg": "resource.aws_instance[test-ec2-instance].root_block_device.encrypted",
      "remediation": {
        "cloudformation": "Set `BlockDeviceMappings.Encrypted` attribute of root device to `true`",
        "terraform": "Set `root_block_device.encrypted` attribute to `true`"
      },
      "subType": "EC2",
      "issue": "The root block device for ec2 instance is not encrypted",
      "publicId": "SNYK-CC-TF-53",
      "title": "Non-Encrypted root block device",
      "references": [
        "https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/RootDeviceStorage.html",
        "https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html",
        "https://aws.amazon.com/premiumsupport/knowledge-center/cloudformation-root-volume-property/",
        "https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/device_naming.html"
      ],
      "isIgnored": false,
      "iacDescription": {
        "issue": "The root block device for ec2 instance is not encrypted",
        "impact": "That should someone gain unauthorized access to the data they would be able to read the contents.",
        "resolve": "Set `root_block_device.encrypted` attribute to `true`"
      },
      "lineNumber": 87,
      "documentation": "https://snyk.io/security-rules/SNYK-CC-TF-53",
      "isGeneratedByCustomRule": false,
      "path": [
        "resource",
        "aws_instance[test-ec2-instance]",
        "root_block_device",
        "encrypted"
      ]
    },
    {
      "severity": "medium",
      "resolve": "Set `policy` attribute",
      "id": "SNYK-CC-AWS-428",
      "impact": "By default endpoints have no access controls applied which means anyone within account can access them",
      "msg": "resource.aws_vpc_endpoint[sqs-vpc-endpoint].policy",
      "remediation": {
        "cloudformation": "Set `Properties.PolicyDocument` attribute",
        "terraform": "Set `policy` attribute"
      },
      "subType": "VPC",
      "issue": "Access policy is not attached to the endpoint",
      "publicId": "SNYK-CC-AWS-428",
      "title": "Access policy is not attached to the endpoint",
      "references": [
        "https://docs.aws.amazon.com/vpc/latest/privatelink/vpc-endpoints-access.html"
      ],
      "isIgnored": false,
      "iacDescription": {
        "issue": "Access policy is not attached to the endpoint",
        "impact": "By default endpoints have no access controls applied which means anyone within account can access them",
        "resolve": "Set `policy` attribute"
      },
      "lineNumber": 94,
      "documentation": "https://snyk.io/security-rules/SNYK-CC-AWS-428",
      "isGeneratedByCustomRule": false,
      "path": [
        "resource",
        "aws_vpc_endpoint[sqs-vpc-endpoint]",
        "policy"
      ]
    },
    {
      "severity": "medium",
      "resolve": "Set `kms_master_key_id` attribute to KMS key",
      "id": "SNYK-CC-TF-54",
      "impact": "That should someone gain unauthorized access to the data they would be able to read the contents.",
      "msg": "resource.aws_sqs_queue[test-queue].kms_master_key_id",
      "remediation": {
        "cloudformation": "Set `Properties.KmsMasterKeyId` attribute to KMS key, for example `alias/aws/sqs`",
        "terraform": "Set `kms_master_key_id` attribute to KMS key"
      },
      "subType": "SQS",
      "issue": "The SQS queue is not encrypted at rest",
      "publicId": "SNYK-CC-TF-54",
      "title": "Non-Encrypted SQS Queue",
      "references": [
        "https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-server-side-encryption.html"
      ],
      "isIgnored": false,
      "iacDescription": {
        "issue": "The SQS queue is not encrypted at rest",
        "impact": "That should someone gain unauthorized access to the data they would be able to read the contents.",
        "resolve": "Set `kms_master_key_id` attribute to KMS key"
      },
      "lineNumber": 103,
      "documentation": "https://snyk.io/security-rules/SNYK-CC-TF-54",
      "isGeneratedByCustomRule": false,
      "path": [
        "resource",
        "aws_sqs_queue[test-queue]",
        "kms_master_key_id"
      ]
    }
  ]
}
