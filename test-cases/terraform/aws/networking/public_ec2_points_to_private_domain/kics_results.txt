
                   .0MO.                                    
                   OMMMx                                    
                   ;NMX;                                    
                    ...           ...              ....     
WMMMd     cWMMM0.  KMMMO      ;xKWMMMMNOc.     ,xXMMMMMWXkc.
WMMMd   .0MMMN:    KMMMO    :XMMMMMMMMMMMWl   xMMMMMWMMMMMMl
WMMMd  lWMMMO.     KMMMO   xMMMMKc...'lXMk   ,MMMMx   .;dXx 
WMMMd.0MMMX;       KMMMO  cMMMMd        '    'MMMMNl'       
WMMMNWMMMMl        KMMMO  0MMMN               oMMMMMMMXkl.  
WMMMMMMMMMMo       KMMMO  0MMMX                .ckKWMMMMMM0.
WMMMMWokMMMMk      KMMMO  oMMMMc              .     .:OMMMM0
WMMMK.  dMMMM0.    KMMMO   KMMMMx'    ,kNc   :WOc.    .NMMMX
WMMMd    cWMMMX.   KMMMO    kMMMMMWXNMMMMMd .WMMMMWKO0NMMMMl
WMMMd     ,NMMMN,  KMMMO     'xNMMMMMMMNx,   .l0WMMMMMMMWk, 
xkkk:      ,kkkkx  okkkl        ;xKXKx;          ;dOKKkc    


Scanning with Keeping Infrastructure as Code Secure v1.4.9



Files scanned: 1
Parsed files: 1
Queries loaded: 851
Queries failed to execute: 0

------------------------------------

Security Group Without Description, Severity: INFO, Results: 2
Description: It's considered a best practice for AWS Security Group to have a description
Platform: Terraform

	[1]: ../../src/main.tf:92

		091: 
		092: resource "aws_security_group" "esdomain" {
		093:   vpc_id = aws_vpc.nondefault.id


	[2]: ../../src/main.tf:121

		120: 
		121: resource "aws_security_group" "publicly_accessible_sg" {
		122:   vpc_id = aws_vpc.nondefault.id


Security Group Rules Without Description, Severity: INFO, Results: 3
Description: It's considered a best practice for all rules in AWS Security Group to have a description
Platform: Terraform

	[1]: ../../src/main.tf:129

		128:   }
		129:   egress {
		130:     from_port = 0


	[2]: ../../src/main.tf:94

		093:   vpc_id = aws_vpc.nondefault.id
		094:   ingress {
		095:     from_port = 443


	[3]: ../../src/main.tf:123

		122:   vpc_id = aws_vpc.nondefault.id
		123:   ingress {
		124:     from_port = 0


Security Group Not Used, Severity: INFO, Results: 1
Description: Security group must be used or not declared
Platform: Terraform

	[1]: ../../src/main.tf:92

		091: 
		092: resource "aws_security_group" "esdomain" {
		093:   vpc_id = aws_vpc.nondefault.id


Resource Not Using Tags, Severity: INFO, Results: 11
Description: AWS services resource tags are an essential part of managing components
Platform: Terraform

	[1]: ../../src/main.tf:75

		074: 
		075: resource "aws_internet_gateway" "igw" {
		076:   vpc_id = aws_vpc.nondefault.id


	[2]: ../../src/main.tf:138

		137: // This instance is can potentially be used to hop into the DB
		138: resource "aws_instance" "public_ins" {
		139:   ami = "ami-0130bec6e5047f596"


	[3]: ../../src/main.tf:69

		068: 
		069: resource "aws_subnet" "nondefault_2" {
		070:   vpc_id = aws_vpc.nondefault.id


	[4]: ../../src/main.tf:31

		030: 
		031:   tags = {
		032:     Name = "main"


	[5]: ../../src/main.tf:92

		091: 
		092: resource "aws_security_group" "esdomain" {
		093:   vpc_id = aws_vpc.nondefault.id


	[6]: ../../src/main.tf:79

		078: 
		079: resource aws_route_table "nondefault_1" {
		080:   vpc_id = aws_vpc.nondefault.id


	[7]: ../../src/main.tf:107

		106: 
		107: resource "aws_elasticsearch_domain" "test" {
		108:   domain_name = "test"


	[8]: ../../src/main.tf:121

		120: 
		121: resource "aws_security_group" "publicly_accessible_sg" {
		122:   vpc_id = aws_vpc.nondefault.id


	[9]: ../../src/main.tf:5

		004: 
		005: resource "aws_vpc" "nondefault" {
		006:   cidr_block = "10.1.1.0/24"


	[10]: ../../src/main.tf:63

		062: 
		063: resource "aws_subnet" "nondefault_1" {
		064:   vpc_id = aws_vpc.nondefault.id


	[11]: ../../src/main.tf:58

		057: 
		058:   tags = {
		059:     Name = "main"


EC2 Not EBS Optimized, Severity: INFO, Results: 1
Description: It's considered a best practice for an EC2 instance to use an EBS optimized instance. This provides the best performance for your EBS volumes by minimizing contention between Amazon EBS I/O and other traffic from your instance
Platform: Terraform

	[1]: ../../src/main.tf:138

		137: // This instance is can potentially be used to hop into the DB
		138: resource "aws_instance" "public_ins" {
		139:   ami = "ami-0130bec6e5047f596"


EC2 Instance Monitoring Disabled, Severity: INFO, Results: 1
Description: EC2 Instance should have detailed monitoring enabled. With detailed monitoring enabled data is available in 1-minute periods
Platform: Terraform

	[1]: ../../src/main.tf:138

		137: // This instance is can potentially be used to hop into the DB
		138: resource "aws_instance" "public_ins" {
		139:   ami = "ami-0130bec6e5047f596"


VPC Without Network Firewall, Severity: MEDIUM, Results: 1
Description: VPC should have a Network Firewall associated
Platform: Terraform

	[1]: ../../src/main.tf:5

		004: 
		005: resource "aws_vpc" "nondefault" {
		006:   cidr_block = "10.1.1.0/24"


VPC FlowLogs Disabled, Severity: MEDIUM, Results: 1
Description: VPC hasn't got any FlowLog associated
Platform: Terraform

	[1]: ../../src/main.tf:5

		004: 
		005: resource "aws_vpc" "nondefault" {
		006:   cidr_block = "10.1.1.0/24"


SQL Analysis Services Port 2383 (TCP) Is Publicly Accessible, Severity: MEDIUM, Results: 1
Description: Check if port 2383 on TCP is publicly accessible by checking the CIDR block range that can access it.
Platform: Terraform

	[1]: ../../src/main.tf:123

		122:   vpc_id = aws_vpc.nondefault.id
		123:   ingress {
		124:     from_port = 0


Elasticsearch Log is disabled, Severity: MEDIUM, Results: 1
Description: AWS Elasticsearch should have logs enabled
Platform: Terraform

	[1]: ../../src/main.tf:107

		106: 
		107: resource "aws_elasticsearch_domain" "test" {
		108:   domain_name = "test"


Elasticsearch Domain Not Encrypted Node To Node, Severity: MEDIUM, Results: 1
Description: Elasticsearch Domain encryption should be enabled node to node
Platform: Terraform

	[1]: ../../src/main.tf:107

		106: 
		107: resource "aws_elasticsearch_domain" "test" {
		108:   domain_name = "test"


ElasticSearch Not Encrypted At Rest, Severity: MEDIUM, Results: 1
Description: Check if ElasticSearch encryption is disabled at Rest
Platform: Terraform

	[1]: ../../src/main.tf:107

		106: 
		107: resource "aws_elasticsearch_domain" "test" {
		108:   domain_name = "test"


Unrestricted Security Group Ingress, Severity: HIGH, Results: 1
Description: Security groups allow ingress from 0.0.0.0:0
Platform: Terraform

	[1]: ../../src/main.tf:127

		126:     to_port = 65000
		127:     cidr_blocks = ["0.0.0.0/0"]
		128:   }


Unknown Port Exposed To Internet, Severity: HIGH, Results: 1
Description: AWS Security Group should not have an unknown port exposed to the entire Internet
Platform: Terraform

	[1]: ../../src/main.tf:127

		126:     to_port = 65000
		127:     cidr_blocks = ["0.0.0.0/0"]
		128:   }


Sensitive Port Is Exposed To Entire Network, Severity: HIGH, Results: 62
Description: A sensitive port, such as port 23 or port 110, is open for the whole network in either TCP or UDP protocol
Platform: Terraform

	[1]: ../../src/main.tf:123

		122:   vpc_id = aws_vpc.nondefault.id
		123:   ingress {
		124:     from_port = 0


	[2]: ../../src/main.tf:123

		122:   vpc_id = aws_vpc.nondefault.id
		123:   ingress {
		124:     from_port = 0


	[3]: ../../src/main.tf:123

		122:   vpc_id = aws_vpc.nondefault.id
		123:   ingress {
		124:     from_port = 0


	[4]: ../../src/main.tf:123

		122:   vpc_id = aws_vpc.nondefault.id
		123:   ingress {
		124:     from_port = 0


	[5]: ../../src/main.tf:123

		122:   vpc_id = aws_vpc.nondefault.id
		123:   ingress {
		124:     from_port = 0


	[6]: ../../src/main.tf:123

		122:   vpc_id = aws_vpc.nondefault.id
		123:   ingress {
		124:     from_port = 0


	[7]: ../../src/main.tf:123

		122:   vpc_id = aws_vpc.nondefault.id
		123:   ingress {
		124:     from_port = 0


	[8]: ../../src/main.tf:123

		122:   vpc_id = aws_vpc.nondefault.id
		123:   ingress {
		124:     from_port = 0


	[9]: ../../src/main.tf:123

		122:   vpc_id = aws_vpc.nondefault.id
		123:   ingress {
		124:     from_port = 0


	[10]: ../../src/main.tf:123

		122:   vpc_id = aws_vpc.nondefault.id
		123:   ingress {
		124:     from_port = 0


	[11]: ../../src/main.tf:123

		122:   vpc_id = aws_vpc.nondefault.id
		123:   ingress {
		124:     from_port = 0


	[12]: ../../src/main.tf:123

		122:   vpc_id = aws_vpc.nondefault.id
		123:   ingress {
		124:     from_port = 0


	[13]: ../../src/main.tf:123

		122:   vpc_id = aws_vpc.nondefault.id
		123:   ingress {
		124:     from_port = 0


	[14]: ../../src/main.tf:123

		122:   vpc_id = aws_vpc.nondefault.id
		123:   ingress {
		124:     from_port = 0


	[15]: ../../src/main.tf:123

		122:   vpc_id = aws_vpc.nondefault.id
		123:   ingress {
		124:     from_port = 0


	[16]: ../../src/main.tf:123

		122:   vpc_id = aws_vpc.nondefault.id
		123:   ingress {
		124:     from_port = 0


	[17]: ../../src/main.tf:123

		122:   vpc_id = aws_vpc.nondefault.id
		123:   ingress {
		124:     from_port = 0


	[18]: ../../src/main.tf:123

		122:   vpc_id = aws_vpc.nondefault.id
		123:   ingress {
		124:     from_port = 0


	[19]: ../../src/main.tf:123

		122:   vpc_id = aws_vpc.nondefault.id
		123:   ingress {
		124:     from_port = 0


	[20]: ../../src/main.tf:123

		122:   vpc_id = aws_vpc.nondefault.id
		123:   ingress {
		124:     from_port = 0


	[21]: ../../src/main.tf:123

		122:   vpc_id = aws_vpc.nondefault.id
		123:   ingress {
		124:     from_port = 0


	[22]: ../../src/main.tf:123

		122:   vpc_id = aws_vpc.nondefault.id
		123:   ingress {
		124:     from_port = 0


	[23]: ../../src/main.tf:123

		122:   vpc_id = aws_vpc.nondefault.id
		123:   ingress {
		124:     from_port = 0


	[24]: ../../src/main.tf:123

		122:   vpc_id = aws_vpc.nondefault.id
		123:   ingress {
		124:     from_port = 0


	[25]: ../../src/main.tf:123

		122:   vpc_id = aws_vpc.nondefault.id
		123:   ingress {
		124:     from_port = 0


	[26]: ../../src/main.tf:123

		122:   vpc_id = aws_vpc.nondefault.id
		123:   ingress {
		124:     from_port = 0


	[27]: ../../src/main.tf:123

		122:   vpc_id = aws_vpc.nondefault.id
		123:   ingress {
		124:     from_port = 0


	[28]: ../../src/main.tf:123

		122:   vpc_id = aws_vpc.nondefault.id
		123:   ingress {
		124:     from_port = 0


	[29]: ../../src/main.tf:123

		122:   vpc_id = aws_vpc.nondefault.id
		123:   ingress {
		124:     from_port = 0


	[30]: ../../src/main.tf:123

		122:   vpc_id = aws_vpc.nondefault.id
		123:   ingress {
		124:     from_port = 0


	[31]: ../../src/main.tf:123

		122:   vpc_id = aws_vpc.nondefault.id
		123:   ingress {
		124:     from_port = 0


	[32]: ../../src/main.tf:123

		122:   vpc_id = aws_vpc.nondefault.id
		123:   ingress {
		124:     from_port = 0


	[33]: ../../src/main.tf:123

		122:   vpc_id = aws_vpc.nondefault.id
		123:   ingress {
		124:     from_port = 0


	[34]: ../../src/main.tf:123

		122:   vpc_id = aws_vpc.nondefault.id
		123:   ingress {
		124:     from_port = 0


	[35]: ../../src/main.tf:123

		122:   vpc_id = aws_vpc.nondefault.id
		123:   ingress {
		124:     from_port = 0


	[36]: ../../src/main.tf:123

		122:   vpc_id = aws_vpc.nondefault.id
		123:   ingress {
		124:     from_port = 0


	[37]: ../../src/main.tf:123

		122:   vpc_id = aws_vpc.nondefault.id
		123:   ingress {
		124:     from_port = 0


	[38]: ../../src/main.tf:123

		122:   vpc_id = aws_vpc.nondefault.id
		123:   ingress {
		124:     from_port = 0


	[39]: ../../src/main.tf:123

		122:   vpc_id = aws_vpc.nondefault.id
		123:   ingress {
		124:     from_port = 0


	[40]: ../../src/main.tf:123

		122:   vpc_id = aws_vpc.nondefault.id
		123:   ingress {
		124:     from_port = 0


	[41]: ../../src/main.tf:123

		122:   vpc_id = aws_vpc.nondefault.id
		123:   ingress {
		124:     from_port = 0


	[42]: ../../src/main.tf:123

		122:   vpc_id = aws_vpc.nondefault.id
		123:   ingress {
		124:     from_port = 0


	[43]: ../../src/main.tf:123

		122:   vpc_id = aws_vpc.nondefault.id
		123:   ingress {
		124:     from_port = 0


	[44]: ../../src/main.tf:123

		122:   vpc_id = aws_vpc.nondefault.id
		123:   ingress {
		124:     from_port = 0


	[45]: ../../src/main.tf:123

		122:   vpc_id = aws_vpc.nondefault.id
		123:   ingress {
		124:     from_port = 0


	[46]: ../../src/main.tf:123

		122:   vpc_id = aws_vpc.nondefault.id
		123:   ingress {
		124:     from_port = 0


	[47]: ../../src/main.tf:123

		122:   vpc_id = aws_vpc.nondefault.id
		123:   ingress {
		124:     from_port = 0


	[48]: ../../src/main.tf:123

		122:   vpc_id = aws_vpc.nondefault.id
		123:   ingress {
		124:     from_port = 0


	[49]: ../../src/main.tf:123

		122:   vpc_id = aws_vpc.nondefault.id
		123:   ingress {
		124:     from_port = 0


	[50]: ../../src/main.tf:123

		122:   vpc_id = aws_vpc.nondefault.id
		123:   ingress {
		124:     from_port = 0


	[51]: ../../src/main.tf:123

		122:   vpc_id = aws_vpc.nondefault.id
		123:   ingress {
		124:     from_port = 0


	[52]: ../../src/main.tf:123

		122:   vpc_id = aws_vpc.nondefault.id
		123:   ingress {
		124:     from_port = 0


	[53]: ../../src/main.tf:123

		122:   vpc_id = aws_vpc.nondefault.id
		123:   ingress {
		124:     from_port = 0


	[54]: ../../src/main.tf:123

		122:   vpc_id = aws_vpc.nondefault.id
		123:   ingress {
		124:     from_port = 0


	[55]: ../../src/main.tf:123

		122:   vpc_id = aws_vpc.nondefault.id
		123:   ingress {
		124:     from_port = 0


	[56]: ../../src/main.tf:123

		122:   vpc_id = aws_vpc.nondefault.id
		123:   ingress {
		124:     from_port = 0


	[57]: ../../src/main.tf:123

		122:   vpc_id = aws_vpc.nondefault.id
		123:   ingress {
		124:     from_port = 0


	[58]: ../../src/main.tf:123

		122:   vpc_id = aws_vpc.nondefault.id
		123:   ingress {
		124:     from_port = 0


	[59]: ../../src/main.tf:123

		122:   vpc_id = aws_vpc.nondefault.id
		123:   ingress {
		124:     from_port = 0


	[60]: ../../src/main.tf:123

		122:   vpc_id = aws_vpc.nondefault.id
		123:   ingress {
		124:     from_port = 0


	[61]: ../../src/main.tf:123

		122:   vpc_id = aws_vpc.nondefault.id
		123:   ingress {
		124:     from_port = 0


	[62]: ../../src/main.tf:123

		122:   vpc_id = aws_vpc.nondefault.id
		123:   ingress {
		124:     from_port = 0


Security Group With Unrestricted Access To SSH, Severity: HIGH, Results: 1
Description: 'SSH' (TCP:22) should not be public in AWS Security Group
Platform: Terraform

	[1]: ../../src/main.tf:127

		126:     to_port = 65000
		127:     cidr_blocks = ["0.0.0.0/0"]
		128:   }


Remote Desktop Port Open, Severity: HIGH, Results: 1
Description: The Remote Desktop port is open in a Security Group
Platform: Terraform

	[1]: ../../src/main.tf:121

		120: 
		121: resource "aws_security_group" "publicly_accessible_sg" {
		122:   vpc_id = aws_vpc.nondefault.id


HTTP Port Open, Severity: HIGH, Results: 1
Description: The HTTP port is open in a Security Group
Platform: Terraform

	[1]: ../../src/main.tf:121

		120: 
		121: resource "aws_security_group" "publicly_accessible_sg" {
		122:   vpc_id = aws_vpc.nondefault.id


EC2 Instance Has Public IP, Severity: HIGH, Results: 1
Description: EC2 Instance should not have a public IP address.
Platform: Terraform

	[1]: ../../src/main.tf:141

		140:   instance_type = "t3.nano"
		141:   associate_public_ip_address = true
		142:   vpc_security_group_ids = [aws_security_group.publicly_accessible_sg.id]



Results Summary:
HIGH: 68
MEDIUM: 6
LOW: 0
INFO: 19
TOTAL: 93

Scan duration: 9.059326588s
