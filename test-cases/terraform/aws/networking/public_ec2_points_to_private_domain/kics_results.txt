[38;2;34;187;51m
                   .0MO.                                    
                   OMMMx                                    
                   ;NMX;                                    
                    ...           ...              ....     
WMMMd     cWMMM0.  KMMMO      ;xKWMMMMNOc.     ,xXMMMMMWXkc.
WMMMd   .0MMMN:    KMMMO    :XMMMMMMMMMMMWl   xMMMMMWMMMMMMl
WMMMd  lWMMMO.     KMMMO   xMMMMKc...'lXMk   ,MMMMx   .;dXx 
WMMMd.0MMMX;       KMMMO  cMMMMd        '    'MMMMNl'       
WMMMNWMMMMl        KMMMO  0MMMN               oMMMMMMMXkl.  
WMMMMMMMMMMo       KMMMO  0MMMX                .ckKWMMMMMM0.
WMMMMWokMMMMk      KMMMO  oMMMMc              .     .:OMMMM0
WMMMK.  dMMMM0.    KMMMO   KMMMMx'    ,kNc   :WOc.    .NMMMX
WMMMd    cWMMMX.   KMMMO    kMMMMMWXNMMMMMd .WMMMMWKO0NMMMMl
WMMMd     ,NMMMN,  KMMMO     'xNMMMMMMMNx,   .l0WMMMMMMMWk, 
xkkk:      ,kkkkx  okkkl        ;xKXKx;          ;dOKKkc    

[0m
Scanning with Keeping Infrastructure as Code Secure v1.6.5



Files scanned: 1
Parsed files: 1
Queries loaded: 1039
Queries failed to execute: 0

------------------------------------

[38;2;91;192;222mSecurity Group Rule Without Description[0m, Severity: [38;2;91;192;222mINFO[0m, Results: 2
[1mDescription:[0m It's considered a best practice for AWS Security Group to have a description
[1mPlatform:[0m Terraform

	[38;2;91;192;222m[1]:[0m ../../src/main.tf:[38;2;34;187;51m121[0m

		120: 
[38;2;240;173;78m		121: resource "aws_security_group" "publicly_accessible_sg" {
[0m		122:   vpc_id = aws_vpc.nondefault.id


	[38;2;91;192;222m[2]:[0m ../../src/main.tf:[38;2;34;187;51m92[0m

		091: 
[38;2;240;173;78m		092: resource "aws_security_group" "esdomain" {
[0m		093:   vpc_id = aws_vpc.nondefault.id


[38;2;91;192;222mSecurity Group Rule Without Description[0m, Severity: [38;2;91;192;222mINFO[0m, Results: 3
[1mDescription:[0m It's considered a best practice for all rules in AWS Security Group to have a description
[1mPlatform:[0m Terraform

	[38;2;91;192;222m[1]:[0m ../../src/main.tf:[38;2;34;187;51m123[0m

		122:   vpc_id = aws_vpc.nondefault.id
[38;2;240;173;78m		123:   ingress {
[0m		124:     from_port = 0


	[38;2;91;192;222m[2]:[0m ../../src/main.tf:[38;2;34;187;51m129[0m

		128:   }
[38;2;240;173;78m		129:   egress {
[0m		130:     from_port = 0


	[38;2;91;192;222m[3]:[0m ../../src/main.tf:[38;2;34;187;51m94[0m

		093:   vpc_id = aws_vpc.nondefault.id
[38;2;240;173;78m		094:   ingress {
[0m		095:     from_port = 443


[38;2;91;192;222mSecurity Group Not Used[0m, Severity: [38;2;91;192;222mINFO[0m, Results: 1
[1mDescription:[0m Security group must be used or not declared
[1mPlatform:[0m Terraform

	[38;2;91;192;222m[1]:[0m ../../src/main.tf:[38;2;34;187;51m92[0m

		091: 
[38;2;240;173;78m		092: resource "aws_security_group" "esdomain" {
[0m		093:   vpc_id = aws_vpc.nondefault.id


[38;2;91;192;222mResource Not Using Tags[0m, Severity: [38;2;91;192;222mINFO[0m, Results: 11
[1mDescription:[0m AWS services resource tags are an essential part of managing components. As a best practice, the field 'tags' should have additional tags defined other than 'Name'
[1mPlatform:[0m Terraform

	[38;2;91;192;222m[1]:[0m ../../src/main.tf:[38;2;34;187;51m58[0m

		057: 
[38;2;240;173;78m		058:   tags = {
[0m		059:     Name = "main"


	[38;2;91;192;222m[2]:[0m ../../src/main.tf:[38;2;34;187;51m79[0m

		078: 
[38;2;240;173;78m		079: resource aws_route_table "nondefault_1" {
[0m		080:   vpc_id = aws_vpc.nondefault.id


	[38;2;91;192;222m[3]:[0m ../../src/main.tf:[38;2;34;187;51m92[0m

		091: 
[38;2;240;173;78m		092: resource "aws_security_group" "esdomain" {
[0m		093:   vpc_id = aws_vpc.nondefault.id


	[38;2;91;192;222m[4]:[0m ../../src/main.tf:[38;2;34;187;51m107[0m

		106: 
[38;2;240;173;78m		107: resource "aws_elasticsearch_domain" "test" {
[0m		108:   domain_name = "test"


	[38;2;91;192;222m[5]:[0m ../../src/main.tf:[38;2;34;187;51m5[0m

		004: 
[38;2;240;173;78m		005: resource "aws_vpc" "nondefault" {
[0m		006:   cidr_block = "10.1.1.0/24"


	[38;2;91;192;222m[6]:[0m ../../src/main.tf:[38;2;34;187;51m75[0m

		074: 
[38;2;240;173;78m		075: resource "aws_internet_gateway" "igw" {
[0m		076:   vpc_id = aws_vpc.nondefault.id


	[38;2;91;192;222m[7]:[0m ../../src/main.tf:[38;2;34;187;51m121[0m

		120: 
[38;2;240;173;78m		121: resource "aws_security_group" "publicly_accessible_sg" {
[0m		122:   vpc_id = aws_vpc.nondefault.id


	[38;2;91;192;222m[8]:[0m ../../src/main.tf:[38;2;34;187;51m138[0m

		137: // This instance is can potentially be used to hop into the DB
[38;2;240;173;78m		138: resource "aws_instance" "public_ins" {
[0m		139:   ami = "ami-0130bec6e5047f596"


	[38;2;91;192;222m[9]:[0m ../../src/main.tf:[38;2;34;187;51m69[0m

		068: 
[38;2;240;173;78m		069: resource "aws_subnet" "nondefault_2" {
[0m		070:   vpc_id = aws_vpc.nondefault.id


	[38;2;91;192;222m[10]:[0m ../../src/main.tf:[38;2;34;187;51m31[0m

		030: 
[38;2;240;173;78m		031:   tags = {
[0m		032:     Name = "main"


	[38;2;91;192;222m[11]:[0m ../../src/main.tf:[38;2;34;187;51m63[0m

		062: 
[38;2;240;173;78m		063: resource "aws_subnet" "nondefault_1" {
[0m		064:   vpc_id = aws_vpc.nondefault.id


[38;2;91;192;222mEC2 Instance Monitoring Disabled[0m, Severity: [38;2;91;192;222mINFO[0m, Results: 1
[1mDescription:[0m EC2 Instance should have detailed monitoring enabled. With detailed monitoring enabled data is available in 1-minute periods
[1mPlatform:[0m Terraform

	[38;2;91;192;222m[1]:[0m ../../src/main.tf:[38;2;34;187;51m138[0m

		137: // This instance is can potentially be used to hop into the DB
[38;2;240;173;78m		138: resource "aws_instance" "public_ins" {
[0m		139:   ami = "ami-0130bec6e5047f596"


[38;2;237;213;126mVPC FlowLogs Disabled[0m, Severity: [38;2;237;213;126mLOW[0m, Results: 1
[1mDescription:[0m Every VPC resource should have an associated Flow Log
[1mPlatform:[0m Terraform

	[38;2;237;213;126m[1]:[0m ../../src/main.tf:[38;2;34;187;51m5[0m

		004: 
[38;2;240;173;78m		005: resource "aws_vpc" "nondefault" {
[0m		006:   cidr_block = "10.1.1.0/24"


[38;2;237;213;126mIAM Access Analyzer Not Enabled[0m, Severity: [38;2;237;213;126mLOW[0m, Results: 1
[1mDescription:[0m IAM Access Analyzer should be enabled and configured to continuously monitor resource permissions
[1mPlatform:[0m Terraform

	[38;2;237;213;126m[1]:[0m ../../src/main.tf:[38;2;34;187;51m5[0m

		004: 
[38;2;240;173;78m		005: resource "aws_vpc" "nondefault" {
[0m		006:   cidr_block = "10.1.1.0/24"


[38;2;237;213;126mEC2 Instance Using Default VPC[0m, Severity: [38;2;237;213;126mLOW[0m, Results: 1
[1mDescription:[0m EC2 Instances should not be configured under a default VPC network
[1mPlatform:[0m Terraform

	[38;2;237;213;126m[1]:[0m ../../src/main.tf:[38;2;34;187;51m143[0m

		142:   vpc_security_group_ids = [aws_security_group.publicly_accessible_sg.id]
[38;2;240;173;78m		143:   subnet_id = aws_subnet.nondefault_1.id
[0m		144: }


[38;2;255;114;19mVPC Without Network Firewall[0m, Severity: [38;2;255;114;19mMEDIUM[0m, Results: 1
[1mDescription:[0m VPC should have a Network Firewall associated
[1mPlatform:[0m Terraform

	[38;2;255;114;19m[1]:[0m ../../src/main.tf:[38;2;34;187;51m5[0m

		004: 
[38;2;240;173;78m		005: resource "aws_vpc" "nondefault" {
[0m		006:   cidr_block = "10.1.1.0/24"


[38;2;255;114;19mSQL Analysis Services Port 2383 (TCP) Is Publicly Accessible[0m, Severity: [38;2;255;114;19mMEDIUM[0m, Results: 1
[1mDescription:[0m Check if port 2383 on TCP is publicly accessible by checking the CIDR block range that can access it.
[1mPlatform:[0m Terraform

	[38;2;255;114;19m[1]:[0m ../../src/main.tf:[38;2;34;187;51m123[0m

		122:   vpc_id = aws_vpc.nondefault.id
[38;2;240;173;78m		123:   ingress {
[0m		124:     from_port = 0


[38;2;255;114;19mElasticsearch Without IAM Authentication[0m, Severity: [38;2;255;114;19mMEDIUM[0m, Results: 1
[1mDescription:[0m AWS Elasticsearch should ensure IAM Authentication
[1mPlatform:[0m Terraform

	[38;2;255;114;19m[1]:[0m ../../src/main.tf:[38;2;34;187;51m107[0m

		106: 
[38;2;240;173;78m		107: resource "aws_elasticsearch_domain" "test" {
[0m		108:   domain_name = "test"


[38;2;255;114;19mElasticsearch Log Disabled[0m, Severity: [38;2;255;114;19mMEDIUM[0m, Results: 1
[1mDescription:[0m AWS Elasticsearch should have logs enabled
[1mPlatform:[0m Terraform

	[38;2;255;114;19m[1]:[0m ../../src/main.tf:[38;2;34;187;51m107[0m

		106: 
[38;2;240;173;78m		107: resource "aws_elasticsearch_domain" "test" {
[0m		108:   domain_name = "test"


[38;2;255;114;19mElasticsearch Domain Not Encrypted Node To Node[0m, Severity: [38;2;255;114;19mMEDIUM[0m, Results: 1
[1mDescription:[0m Elasticsearch Domain encryption should be enabled node to node
[1mPlatform:[0m Terraform

	[38;2;255;114;19m[1]:[0m ../../src/main.tf:[38;2;34;187;51m107[0m

		106: 
[38;2;240;173;78m		107: resource "aws_elasticsearch_domain" "test" {
[0m		108:   domain_name = "test"


[38;2;255;114;19mElasticSearch Not Encrypted At Rest[0m, Severity: [38;2;255;114;19mMEDIUM[0m, Results: 1
[1mDescription:[0m Check if ElasticSearch encryption is disabled at Rest
[1mPlatform:[0m Terraform

	[38;2;255;114;19m[1]:[0m ../../src/main.tf:[38;2;34;187;51m107[0m

		106: 
[38;2;240;173;78m		107: resource "aws_elasticsearch_domain" "test" {
[0m		108:   domain_name = "test"


[38;2;187;33;36mUnrestricted Security Group Ingress[0m, Severity: [38;2;187;33;36mHIGH[0m, Results: 1
[1mDescription:[0m Security groups allow ingress from 0.0.0.0:0
[1mPlatform:[0m Terraform

	[38;2;187;33;36m[1]:[0m ../../src/main.tf:[38;2;34;187;51m127[0m

		126:     to_port = 65000
[38;2;240;173;78m		127:     cidr_blocks = ["0.0.0.0/0"]
[0m		128:   }


[38;2;187;33;36mUnknown Port Exposed To Internet[0m, Severity: [38;2;187;33;36mHIGH[0m, Results: 1
[1mDescription:[0m AWS Security Group should not have an unknown port exposed to the entire Internet
[1mPlatform:[0m Terraform

	[38;2;187;33;36m[1]:[0m ../../src/main.tf:[38;2;34;187;51m127[0m

		126:     to_port = 65000
[38;2;240;173;78m		127:     cidr_blocks = ["0.0.0.0/0"]
[0m		128:   }


[38;2;187;33;36mSensitive Port Is Exposed To Entire Network[0m, Severity: [38;2;187;33;36mHIGH[0m, Results: 63
[1mDescription:[0m A sensitive port, such as port 23 or port 110, is open for the whole network in either TCP or UDP protocol
[1mPlatform:[0m Terraform

	[38;2;187;33;36m[1]:[0m ../../src/main.tf:[38;2;34;187;51m123[0m

		122:   vpc_id = aws_vpc.nondefault.id
[38;2;240;173;78m		123:   ingress {
[0m		124:     from_port = 0


	[38;2;187;33;36m[2]:[0m ../../src/main.tf:[38;2;34;187;51m123[0m

		122:   vpc_id = aws_vpc.nondefault.id
[38;2;240;173;78m		123:   ingress {
[0m		124:     from_port = 0


	[38;2;187;33;36m[3]:[0m ../../src/main.tf:[38;2;34;187;51m123[0m

		122:   vpc_id = aws_vpc.nondefault.id
[38;2;240;173;78m		123:   ingress {
[0m		124:     from_port = 0


	[38;2;187;33;36m[4]:[0m ../../src/main.tf:[38;2;34;187;51m123[0m

		122:   vpc_id = aws_vpc.nondefault.id
[38;2;240;173;78m		123:   ingress {
[0m		124:     from_port = 0


	[38;2;187;33;36m[5]:[0m ../../src/main.tf:[38;2;34;187;51m123[0m

		122:   vpc_id = aws_vpc.nondefault.id
[38;2;240;173;78m		123:   ingress {
[0m		124:     from_port = 0


	[38;2;187;33;36m[6]:[0m ../../src/main.tf:[38;2;34;187;51m123[0m

		122:   vpc_id = aws_vpc.nondefault.id
[38;2;240;173;78m		123:   ingress {
[0m		124:     from_port = 0


	[38;2;187;33;36m[7]:[0m ../../src/main.tf:[38;2;34;187;51m123[0m

		122:   vpc_id = aws_vpc.nondefault.id
[38;2;240;173;78m		123:   ingress {
[0m		124:     from_port = 0


	[38;2;187;33;36m[8]:[0m ../../src/main.tf:[38;2;34;187;51m123[0m

		122:   vpc_id = aws_vpc.nondefault.id
[38;2;240;173;78m		123:   ingress {
[0m		124:     from_port = 0


	[38;2;187;33;36m[9]:[0m ../../src/main.tf:[38;2;34;187;51m123[0m

		122:   vpc_id = aws_vpc.nondefault.id
[38;2;240;173;78m		123:   ingress {
[0m		124:     from_port = 0


	[38;2;187;33;36m[10]:[0m ../../src/main.tf:[38;2;34;187;51m123[0m

		122:   vpc_id = aws_vpc.nondefault.id
[38;2;240;173;78m		123:   ingress {
[0m		124:     from_port = 0


	[38;2;187;33;36m[11]:[0m ../../src/main.tf:[38;2;34;187;51m123[0m

		122:   vpc_id = aws_vpc.nondefault.id
[38;2;240;173;78m		123:   ingress {
[0m		124:     from_port = 0


	[38;2;187;33;36m[12]:[0m ../../src/main.tf:[38;2;34;187;51m123[0m

		122:   vpc_id = aws_vpc.nondefault.id
[38;2;240;173;78m		123:   ingress {
[0m		124:     from_port = 0


	[38;2;187;33;36m[13]:[0m ../../src/main.tf:[38;2;34;187;51m123[0m

		122:   vpc_id = aws_vpc.nondefault.id
[38;2;240;173;78m		123:   ingress {
[0m		124:     from_port = 0


	[38;2;187;33;36m[14]:[0m ../../src/main.tf:[38;2;34;187;51m123[0m

		122:   vpc_id = aws_vpc.nondefault.id
[38;2;240;173;78m		123:   ingress {
[0m		124:     from_port = 0


	[38;2;187;33;36m[15]:[0m ../../src/main.tf:[38;2;34;187;51m123[0m

		122:   vpc_id = aws_vpc.nondefault.id
[38;2;240;173;78m		123:   ingress {
[0m		124:     from_port = 0


	[38;2;187;33;36m[16]:[0m ../../src/main.tf:[38;2;34;187;51m123[0m

		122:   vpc_id = aws_vpc.nondefault.id
[38;2;240;173;78m		123:   ingress {
[0m		124:     from_port = 0


	[38;2;187;33;36m[17]:[0m ../../src/main.tf:[38;2;34;187;51m123[0m

		122:   vpc_id = aws_vpc.nondefault.id
[38;2;240;173;78m		123:   ingress {
[0m		124:     from_port = 0


	[38;2;187;33;36m[18]:[0m ../../src/main.tf:[38;2;34;187;51m123[0m

		122:   vpc_id = aws_vpc.nondefault.id
[38;2;240;173;78m		123:   ingress {
[0m		124:     from_port = 0


	[38;2;187;33;36m[19]:[0m ../../src/main.tf:[38;2;34;187;51m123[0m

		122:   vpc_id = aws_vpc.nondefault.id
[38;2;240;173;78m		123:   ingress {
[0m		124:     from_port = 0


	[38;2;187;33;36m[20]:[0m ../../src/main.tf:[38;2;34;187;51m123[0m

		122:   vpc_id = aws_vpc.nondefault.id
[38;2;240;173;78m		123:   ingress {
[0m		124:     from_port = 0


	[38;2;187;33;36m[21]:[0m ../../src/main.tf:[38;2;34;187;51m123[0m

		122:   vpc_id = aws_vpc.nondefault.id
[38;2;240;173;78m		123:   ingress {
[0m		124:     from_port = 0


	[38;2;187;33;36m[22]:[0m ../../src/main.tf:[38;2;34;187;51m123[0m

		122:   vpc_id = aws_vpc.nondefault.id
[38;2;240;173;78m		123:   ingress {
[0m		124:     from_port = 0


	[38;2;187;33;36m[23]:[0m ../../src/main.tf:[38;2;34;187;51m123[0m

		122:   vpc_id = aws_vpc.nondefault.id
[38;2;240;173;78m		123:   ingress {
[0m		124:     from_port = 0


	[38;2;187;33;36m[24]:[0m ../../src/main.tf:[38;2;34;187;51m123[0m

		122:   vpc_id = aws_vpc.nondefault.id
[38;2;240;173;78m		123:   ingress {
[0m		124:     from_port = 0


	[38;2;187;33;36m[25]:[0m ../../src/main.tf:[38;2;34;187;51m123[0m

		122:   vpc_id = aws_vpc.nondefault.id
[38;2;240;173;78m		123:   ingress {
[0m		124:     from_port = 0


	[38;2;187;33;36m[26]:[0m ../../src/main.tf:[38;2;34;187;51m123[0m

		122:   vpc_id = aws_vpc.nondefault.id
[38;2;240;173;78m		123:   ingress {
[0m		124:     from_port = 0


	[38;2;187;33;36m[27]:[0m ../../src/main.tf:[38;2;34;187;51m123[0m

		122:   vpc_id = aws_vpc.nondefault.id
[38;2;240;173;78m		123:   ingress {
[0m		124:     from_port = 0


	[38;2;187;33;36m[28]:[0m ../../src/main.tf:[38;2;34;187;51m123[0m

		122:   vpc_id = aws_vpc.nondefault.id
[38;2;240;173;78m		123:   ingress {
[0m		124:     from_port = 0


	[38;2;187;33;36m[29]:[0m ../../src/main.tf:[38;2;34;187;51m123[0m

		122:   vpc_id = aws_vpc.nondefault.id
[38;2;240;173;78m		123:   ingress {
[0m		124:     from_port = 0


	[38;2;187;33;36m[30]:[0m ../../src/main.tf:[38;2;34;187;51m123[0m

		122:   vpc_id = aws_vpc.nondefault.id
[38;2;240;173;78m		123:   ingress {
[0m		124:     from_port = 0


	[38;2;187;33;36m[31]:[0m ../../src/main.tf:[38;2;34;187;51m123[0m

		122:   vpc_id = aws_vpc.nondefault.id
[38;2;240;173;78m		123:   ingress {
[0m		124:     from_port = 0


	[38;2;187;33;36m[32]:[0m ../../src/main.tf:[38;2;34;187;51m123[0m

		122:   vpc_id = aws_vpc.nondefault.id
[38;2;240;173;78m		123:   ingress {
[0m		124:     from_port = 0


	[38;2;187;33;36m[33]:[0m ../../src/main.tf:[38;2;34;187;51m123[0m

		122:   vpc_id = aws_vpc.nondefault.id
[38;2;240;173;78m		123:   ingress {
[0m		124:     from_port = 0


	[38;2;187;33;36m[34]:[0m ../../src/main.tf:[38;2;34;187;51m123[0m

		122:   vpc_id = aws_vpc.nondefault.id
[38;2;240;173;78m		123:   ingress {
[0m		124:     from_port = 0


	[38;2;187;33;36m[35]:[0m ../../src/main.tf:[38;2;34;187;51m123[0m

		122:   vpc_id = aws_vpc.nondefault.id
[38;2;240;173;78m		123:   ingress {
[0m		124:     from_port = 0


	[38;2;187;33;36m[36]:[0m ../../src/main.tf:[38;2;34;187;51m123[0m

		122:   vpc_id = aws_vpc.nondefault.id
[38;2;240;173;78m		123:   ingress {
[0m		124:     from_port = 0


	[38;2;187;33;36m[37]:[0m ../../src/main.tf:[38;2;34;187;51m123[0m

		122:   vpc_id = aws_vpc.nondefault.id
[38;2;240;173;78m		123:   ingress {
[0m		124:     from_port = 0


	[38;2;187;33;36m[38]:[0m ../../src/main.tf:[38;2;34;187;51m123[0m

		122:   vpc_id = aws_vpc.nondefault.id
[38;2;240;173;78m		123:   ingress {
[0m		124:     from_port = 0


	[38;2;187;33;36m[39]:[0m ../../src/main.tf:[38;2;34;187;51m123[0m

		122:   vpc_id = aws_vpc.nondefault.id
[38;2;240;173;78m		123:   ingress {
[0m		124:     from_port = 0


	[38;2;187;33;36m[40]:[0m ../../src/main.tf:[38;2;34;187;51m123[0m

		122:   vpc_id = aws_vpc.nondefault.id
[38;2;240;173;78m		123:   ingress {
[0m		124:     from_port = 0


	[38;2;187;33;36m[41]:[0m ../../src/main.tf:[38;2;34;187;51m123[0m

		122:   vpc_id = aws_vpc.nondefault.id
[38;2;240;173;78m		123:   ingress {
[0m		124:     from_port = 0


	[38;2;187;33;36m[42]:[0m ../../src/main.tf:[38;2;34;187;51m123[0m

		122:   vpc_id = aws_vpc.nondefault.id
[38;2;240;173;78m		123:   ingress {
[0m		124:     from_port = 0


	[38;2;187;33;36m[43]:[0m ../../src/main.tf:[38;2;34;187;51m123[0m

		122:   vpc_id = aws_vpc.nondefault.id
[38;2;240;173;78m		123:   ingress {
[0m		124:     from_port = 0


	[38;2;187;33;36m[44]:[0m ../../src/main.tf:[38;2;34;187;51m123[0m

		122:   vpc_id = aws_vpc.nondefault.id
[38;2;240;173;78m		123:   ingress {
[0m		124:     from_port = 0


	[38;2;187;33;36m[45]:[0m ../../src/main.tf:[38;2;34;187;51m123[0m

		122:   vpc_id = aws_vpc.nondefault.id
[38;2;240;173;78m		123:   ingress {
[0m		124:     from_port = 0


	[38;2;187;33;36m[46]:[0m ../../src/main.tf:[38;2;34;187;51m123[0m

		122:   vpc_id = aws_vpc.nondefault.id
[38;2;240;173;78m		123:   ingress {
[0m		124:     from_port = 0


	[38;2;187;33;36m[47]:[0m ../../src/main.tf:[38;2;34;187;51m123[0m

		122:   vpc_id = aws_vpc.nondefault.id
[38;2;240;173;78m		123:   ingress {
[0m		124:     from_port = 0


	[38;2;187;33;36m[48]:[0m ../../src/main.tf:[38;2;34;187;51m123[0m

		122:   vpc_id = aws_vpc.nondefault.id
[38;2;240;173;78m		123:   ingress {
[0m		124:     from_port = 0


	[38;2;187;33;36m[49]:[0m ../../src/main.tf:[38;2;34;187;51m123[0m

		122:   vpc_id = aws_vpc.nondefault.id
[38;2;240;173;78m		123:   ingress {
[0m		124:     from_port = 0


	[38;2;187;33;36m[50]:[0m ../../src/main.tf:[38;2;34;187;51m123[0m

		122:   vpc_id = aws_vpc.nondefault.id
[38;2;240;173;78m		123:   ingress {
[0m		124:     from_port = 0


	[38;2;187;33;36m[51]:[0m ../../src/main.tf:[38;2;34;187;51m123[0m

		122:   vpc_id = aws_vpc.nondefault.id
[38;2;240;173;78m		123:   ingress {
[0m		124:     from_port = 0


	[38;2;187;33;36m[52]:[0m ../../src/main.tf:[38;2;34;187;51m123[0m

		122:   vpc_id = aws_vpc.nondefault.id
[38;2;240;173;78m		123:   ingress {
[0m		124:     from_port = 0


	[38;2;187;33;36m[53]:[0m ../../src/main.tf:[38;2;34;187;51m123[0m

		122:   vpc_id = aws_vpc.nondefault.id
[38;2;240;173;78m		123:   ingress {
[0m		124:     from_port = 0


	[38;2;187;33;36m[54]:[0m ../../src/main.tf:[38;2;34;187;51m123[0m

		122:   vpc_id = aws_vpc.nondefault.id
[38;2;240;173;78m		123:   ingress {
[0m		124:     from_port = 0


	[38;2;187;33;36m[55]:[0m ../../src/main.tf:[38;2;34;187;51m123[0m

		122:   vpc_id = aws_vpc.nondefault.id
[38;2;240;173;78m		123:   ingress {
[0m		124:     from_port = 0


	[38;2;187;33;36m[56]:[0m ../../src/main.tf:[38;2;34;187;51m123[0m

		122:   vpc_id = aws_vpc.nondefault.id
[38;2;240;173;78m		123:   ingress {
[0m		124:     from_port = 0


	[38;2;187;33;36m[57]:[0m ../../src/main.tf:[38;2;34;187;51m123[0m

		122:   vpc_id = aws_vpc.nondefault.id
[38;2;240;173;78m		123:   ingress {
[0m		124:     from_port = 0


	[38;2;187;33;36m[58]:[0m ../../src/main.tf:[38;2;34;187;51m123[0m

		122:   vpc_id = aws_vpc.nondefault.id
[38;2;240;173;78m		123:   ingress {
[0m		124:     from_port = 0


	[38;2;187;33;36m[59]:[0m ../../src/main.tf:[38;2;34;187;51m123[0m

		122:   vpc_id = aws_vpc.nondefault.id
[38;2;240;173;78m		123:   ingress {
[0m		124:     from_port = 0


	[38;2;187;33;36m[60]:[0m ../../src/main.tf:[38;2;34;187;51m123[0m

		122:   vpc_id = aws_vpc.nondefault.id
[38;2;240;173;78m		123:   ingress {
[0m		124:     from_port = 0


	[38;2;187;33;36m[61]:[0m ../../src/main.tf:[38;2;34;187;51m123[0m

		122:   vpc_id = aws_vpc.nondefault.id
[38;2;240;173;78m		123:   ingress {
[0m		124:     from_port = 0


	[38;2;187;33;36m[62]:[0m ../../src/main.tf:[38;2;34;187;51m123[0m

		122:   vpc_id = aws_vpc.nondefault.id
[38;2;240;173;78m		123:   ingress {
[0m		124:     from_port = 0


	[38;2;187;33;36m[63]:[0m ../../src/main.tf:[38;2;34;187;51m123[0m

		122:   vpc_id = aws_vpc.nondefault.id
[38;2;240;173;78m		123:   ingress {
[0m		124:     from_port = 0


[38;2;187;33;36mSecurity Group With Unrestricted Access To SSH[0m, Severity: [38;2;187;33;36mHIGH[0m, Results: 1
[1mDescription:[0m 'SSH' (TCP:22) should not be public in AWS Security Group
[1mPlatform:[0m Terraform

	[38;2;187;33;36m[1]:[0m ../../src/main.tf:[38;2;34;187;51m127[0m

		126:     to_port = 65000
[38;2;240;173;78m		127:     cidr_blocks = ["0.0.0.0/0"]
[0m		128:   }


[38;2;187;33;36mRemote Desktop Port Open To Internet[0m, Severity: [38;2;187;33;36mHIGH[0m, Results: 1
[1mDescription:[0m The Remote Desktop port is open to the internet in a Security Group
[1mPlatform:[0m Terraform

	[38;2;187;33;36m[1]:[0m ../../src/main.tf:[38;2;34;187;51m121[0m

		120: 
[38;2;240;173;78m		121: resource "aws_security_group" "publicly_accessible_sg" {
[0m		122:   vpc_id = aws_vpc.nondefault.id


[38;2;187;33;36mHTTP Port Open To Internet[0m, Severity: [38;2;187;33;36mHIGH[0m, Results: 1
[1mDescription:[0m The HTTP port is open to the internet in a Security Group
[1mPlatform:[0m Terraform

	[38;2;187;33;36m[1]:[0m ../../src/main.tf:[38;2;34;187;51m121[0m

		120: 
[38;2;240;173;78m		121: resource "aws_security_group" "publicly_accessible_sg" {
[0m		122:   vpc_id = aws_vpc.nondefault.id


[38;2;187;33;36mEC2 Instance Has Public IP[0m, Severity: [38;2;187;33;36mHIGH[0m, Results: 1
[1mDescription:[0m EC2 Instance should not have a public IP address.
[1mPlatform:[0m Terraform

	[38;2;187;33;36m[1]:[0m ../../src/main.tf:[38;2;34;187;51m141[0m

		140:   instance_type = "t3.nano"
[38;2;240;173;78m		141:   associate_public_ip_address = true
[0m		142:   vpc_security_group_ids = [aws_security_group.publicly_accessible_sg.id]



Results Summary:
[38;2;187;33;36mHIGH[0m: 69
[38;2;255;114;19mMEDIUM[0m: 6
[38;2;237;213;126mLOW[0m: 3
[38;2;91;192;222mINFO[0m: 18
TOTAL: 96

Scan duration: 15.443953256s
