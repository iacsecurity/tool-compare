
WARNINGs found:
Rule: Ensure RDS database is not publicly accessible
Description: Databases should not be publicly accessible. If a database is serving content to be consumed by external users, it's best to go through an API gateway or some other control point.
Remediation Steps - Cloud Console: Follow the guide at https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_VPC.WorkingWithRDSInstanceinaVPC.html#USER_VPC.Hiding to hide a DB instance in a VPC from the Internet.
Remediation Steps - Terraform: For the aws_db_instance resource, set publicly_accesible argument to false. Update the rules of security groups and NACLs to block inbound traffic from Internet to the database instance.
 - 1 Resources Exposed:
-----------------------------------------------
   - Exposed Resource: [aws_db_instance.test] (main.tf:60)
     Violating Resource: [aws_security_group.nondefault]  (main.tf:9)

     Evidence:
         Internet
             | RDS Instance aws_db_instance.test is on VPC aws_vpc.nondefault
             | instance uses security groups aws_security_group.nondefault 
             | RDS Instance uses the subnets aws_subnet.nondefault_1, aws_subnet.nondefault_2
             | RDS Instance is reachable from the internet due to subnet(s) and route table(s)
             | Subnet uses Network ACL's nacl-pseudo-9d292d65-4b2d-48ca-870e-773aa16382f0, nacl-pseudo-9d292d65-4b2d-48ca-870e-773aa16382f0
             | Network ACL's and security group(s) allows the RDS configured ports
         RDS Instance


-----------------------------------------------
Rule: Ensure RDS instances/clusters being created are set to be encrypted at rest
Description: Cloudrail will review the RDS instances, clusters and global clusters being created in your environment. If an instance, cluster or global cluster is not set to be encrypted at rest, Cloudrail will highlight it as a violation. This rule will only flag a violation for resources that are not yet created.
Remediation Steps - Cloud Console: Follow the guide at https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Overview.Encryption.html to enable encryption for RDS instances. Follow the guide at https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/Aurora.CreateInstance.html to enable encryption for RDS clusters. Follow the guide at https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-global-database-getting-started.html to enable encryption for RDS global clusters.
Remediation Steps - Terraform: For the aws_db_instance, aws_rds_global_cluster, and aws_rds_cluster resources, set the storage_encrypted argument to true.
 - 1 Resources Exposed:
-----------------------------------------------
   - Exposed Resource: [aws_db_instance.test] (main.tf:60)
     Violating Resource: [aws_db_instance.test]  (main.tf:60)

     Evidence:
         RDS Instance
             | RDS Instance aws_db_instance.test is not set to use encrypt at rest


-----------------------------------------------
Rule: Ensure all security groups and rules have a description detailing the rule
Description: Cloudrail will review your security groups. If a security group is using a default description, or has a rule which does not include a description, this rule will trigger.
Remediation Steps - Cloud Console: Follow the guide at https://docs.aws.amazon.com/vpc/latest/userguide/VPC_SecurityGroups.html to update the security group or security group rules description field.
Remediation Steps - Terraform: For the aws_security_group and aws_security_group_rule resources, set description argument with a proper value. Note, this will force the re-creation of the security group and all resources that depend on it. This is an AWS limitation.
 - 1 Resources Exposed:
-----------------------------------------------
   - Exposed Resource: [aws_security_group.nondefault] (main.tf:9)
     Violating Resource: [aws_security_group.nondefault]  (main.tf:9)

     Evidence:
             | The Security group aws_security_group.nondefault does not have a description for the ingress rule of 0.0.0.0/0 for ports 0:65000 using protocol TCP


-----------------------------------------------
Rule: Ensure all resources that can be tagged have at least one tag
Description: Some organizations require that all resources have at least one tag set. This rule will review the resources that can be tagged, and make sure each one has a tag that is not the Name tag. Resources that are not tagged will be flagged.
Remediation Steps - Cloud Console: Access the specific resource in the AWS console and add tags.
Remediation Steps - Terraform: Add a tags section to the resource with at least one tag beyond the Name tag.
 - 8 Resources Exposed:
-----------------------------------------------
   - Exposed Resource: [aws_route_table.nondefault] (main.tf:42)
     Violating Resource: [aws_route_table.nondefault]  (main.tf:42)

     Evidence:
             | Resource Route table aws_route_table.nondefault does not have any tags set


   - Exposed Resource: [aws_internet_gateway.igw] (main.tf:38)
     Violating Resource: [aws_internet_gateway.igw]  (main.tf:38)

     Evidence:
             | Resource Internet gateway aws_internet_gateway.igw does not have any tags set


   - Exposed Resource: [aws_db_subnet_group.nondefault] (main.tf:32)
     Violating Resource: [aws_db_subnet_group.nondefault]  (main.tf:32)

     Evidence:
             | Resource DB subnet group aws_db_subnet_group.nondefault does not have any tags set


   - Exposed Resource: [aws_db_instance.test] (main.tf:60)
     Violating Resource: [aws_db_instance.test]  (main.tf:60)

     Evidence:
             | Resource RDS Instance aws_db_instance.test does not have any tags set


   - Exposed Resource: [aws_subnet.nondefault_1] (main.tf:20)
     Violating Resource: [aws_subnet.nondefault_1]  (main.tf:20)

     Evidence:
             | Resource Subnet aws_subnet.nondefault_1 does not have any tags set


   - Exposed Resource: [aws_vpc.nondefault] (main.tf:5)
     Violating Resource: [aws_vpc.nondefault]  (main.tf:5)

     Evidence:
             | Resource VPC aws_vpc.nondefault does not have any tags set


   - Exposed Resource: [aws_security_group.nondefault] (main.tf:9)
     Violating Resource: [aws_security_group.nondefault]  (main.tf:9)

     Evidence:
             | Resource Security group aws_security_group.nondefault does not have any tags set


   - Exposed Resource: [aws_subnet.nondefault_2] (main.tf:26)
     Violating Resource: [aws_subnet.nondefault_2]  (main.tf:26)

     Evidence:
             | Resource Subnet aws_subnet.nondefault_2 does not have any tags set


-----------------------------------------------
Rule: Ensure RDS instances and clusters have a backup retention policy
Description: Cloudrail will review the RDS instances and clusters configuration in your environment. If an instance or cluster is not configured with a backup retention policy, Cloudrail will highlight it as a violation.
Remediation Steps - Cloud Console: Follow the guide at https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_WorkingWithAutomatedBackups.html#USER_WorkingWithAutomatedBackups.BackupRetention in order to set the backup retention period to a positive nonzero value for RDS instances. Follow the guide at https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/Aurora.Managing.Backups.html in order to set the backup retention period to a positive nonzero value for RDS clusters.
Remediation Steps - Terraform: For the aws_db_instance or aws_rds_cluster resource, set the backup_retention_period argument to a value higher than 0.
 - 1 Resources Exposed:
-----------------------------------------------
   - Exposed Resource: [aws_db_instance.test] (main.tf:60)
     Violating Resource: [aws_db_instance.test]  (main.tf:60)

     Evidence:
             | The RDS Instance aws_db_instance.test does not have a backup retention policy configured


-----------------------------------------------
Rule: Ensure RDS database has IAM authentication enabled
Description: Cloudrail will review RDS instances and clusters configuration in your environment. If IAM authentication is not enabled, Cloudrail will highlight it as a violation.
Remediation Steps - Cloud Console: Follow the guide at https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.Enabling.html in order to enable IAM database authentication for the RDS instance or cluster.
Remediation Steps - Terraform: For the aws_db_instance or aws_rds_cluster resources, set the iam_database_authentication_enabled argument to true.
 - 1 Resources Exposed:
-----------------------------------------------
   - Exposed Resource: [aws_db_instance.test] (main.tf:60)
     Violating Resource: [aws_db_instance.test]  (main.tf:60)

     Evidence:
             | The RDS Instance aws_db_instance.test has IAM database authentication disabled


-----------------------------------------------
Rule: Ensure RDS instances and clusters have logging enabled
Description: Cloudrail will review the RDS instances and clusters configuration in your environment. If an instance or cluster is not configured to export logs to Cloudwatch, Cloudrail will highlight it as a violation.
Remediation Steps - Cloud Console: Follow the guide at https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch in order to enable log export to Cloudwatch for RDS instances and clusters.
Remediation Steps - Terraform: For the aws_db_instance or aws_rds_cluster resource, set enabled_cloudwatch_logs_exports argument to a list containing at least one of the supported log types.
 - 1 Resources Exposed:
-----------------------------------------------
   - Exposed Resource: [aws_db_instance.test] (main.tf:60)
     Violating Resource: [aws_db_instance.test]  (main.tf:60)

     Evidence:
             | The RDS Instance aws_db_instance.test does not have Cloudwatch log export enabled


-----------------------------------------------

Cloudrail ran this assessment without any policies and so all rule violations show as warnings.
You can increase a rule's enforcement level by creating a Policy in the Web UI and adding the rule to it.