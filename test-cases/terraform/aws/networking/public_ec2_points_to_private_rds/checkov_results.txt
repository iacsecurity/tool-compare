terraform scan results:

Passed checks: 22, Failed checks: 23, Skipped checks: 0

Check: CKV_AWS_230: "Ensure no NACL allow ingress from 0.0.0.0:0 to port 20"
	FAILED for resource: aws_network_acl.ec2_nacl
	File: /main.tf:14-39
	Guide: https://docs.bridgecrew.io/docs/ensure-aws-nacl-does-not-allow-ingress-from-00000-to-port-20

		14 | resource "aws_network_acl" "ec2_nacl" {
		15 |   vpc_id = aws_vpc.nondefault.id
		16 |   subnet_ids = [aws_subnet.nondefault_1.id]
		17 | 
		18 |   egress {
		19 |     protocol   = -1
		20 |     rule_no    = 200
		21 |     action     = "allow"
		22 |     cidr_block = "0.0.0.0/0"
		23 |     from_port  = 0
		24 |     to_port    = 65000
		25 |   }
		26 | 
		27 |   ingress {
		28 |     protocol   = -1
		29 |     rule_no    = 100
		30 |     action     = "allow"
		31 |     cidr_block = "0.0.0.0/0"
		32 |     from_port  = 0
		33 |     to_port    = 65000
		34 |   }
		35 | 
		36 |   tags = {
		37 |     Name = "main"
		38 |   }
		39 | }

Check: CKV_AWS_229: "Ensure no NACL allow ingress from 0.0.0.0:0 to port 21"
	FAILED for resource: aws_network_acl.ec2_nacl
	File: /main.tf:14-39
	Guide: https://docs.bridgecrew.io/docs/ensure-aws-nacl-does-not-allow-ingress-from-00000-to-port-21

		14 | resource "aws_network_acl" "ec2_nacl" {
		15 |   vpc_id = aws_vpc.nondefault.id
		16 |   subnet_ids = [aws_subnet.nondefault_1.id]
		17 | 
		18 |   egress {
		19 |     protocol   = -1
		20 |     rule_no    = 200
		21 |     action     = "allow"
		22 |     cidr_block = "0.0.0.0/0"
		23 |     from_port  = 0
		24 |     to_port    = 65000
		25 |   }
		26 | 
		27 |   ingress {
		28 |     protocol   = -1
		29 |     rule_no    = 100
		30 |     action     = "allow"
		31 |     cidr_block = "0.0.0.0/0"
		32 |     from_port  = 0
		33 |     to_port    = 65000
		34 |   }
		35 | 
		36 |   tags = {
		37 |     Name = "main"
		38 |   }
		39 | }

Check: CKV_AWS_232: "Ensure no NACL allow ingress from 0.0.0.0:0 to port 22"
	FAILED for resource: aws_network_acl.ec2_nacl
	File: /main.tf:14-39
	Guide: https://docs.bridgecrew.io/docs/ensure-aws-nacl-does-not-allow-ingress-from-00000-to-port-22

		14 | resource "aws_network_acl" "ec2_nacl" {
		15 |   vpc_id = aws_vpc.nondefault.id
		16 |   subnet_ids = [aws_subnet.nondefault_1.id]
		17 | 
		18 |   egress {
		19 |     protocol   = -1
		20 |     rule_no    = 200
		21 |     action     = "allow"
		22 |     cidr_block = "0.0.0.0/0"
		23 |     from_port  = 0
		24 |     to_port    = 65000
		25 |   }
		26 | 
		27 |   ingress {
		28 |     protocol   = -1
		29 |     rule_no    = 100
		30 |     action     = "allow"
		31 |     cidr_block = "0.0.0.0/0"
		32 |     from_port  = 0
		33 |     to_port    = 65000
		34 |   }
		35 | 
		36 |   tags = {
		37 |     Name = "main"
		38 |   }
		39 | }

Check: CKV_AWS_231: "Ensure no NACL allow ingress from 0.0.0.0:0 to port 3389"
	FAILED for resource: aws_network_acl.ec2_nacl
	File: /main.tf:14-39
	Guide: https://docs.bridgecrew.io/docs/ensure-aws-nacl-does-not-allow-ingress-from-00000-to-port-3389

		14 | resource "aws_network_acl" "ec2_nacl" {
		15 |   vpc_id = aws_vpc.nondefault.id
		16 |   subnet_ids = [aws_subnet.nondefault_1.id]
		17 | 
		18 |   egress {
		19 |     protocol   = -1
		20 |     rule_no    = 200
		21 |     action     = "allow"
		22 |     cidr_block = "0.0.0.0/0"
		23 |     from_port  = 0
		24 |     to_port    = 65000
		25 |   }
		26 | 
		27 |   ingress {
		28 |     protocol   = -1
		29 |     rule_no    = 100
		30 |     action     = "allow"
		31 |     cidr_block = "0.0.0.0/0"
		32 |     from_port  = 0
		33 |     to_port    = 65000
		34 |   }
		35 | 
		36 |   tags = {
		37 |     Name = "main"
		38 |   }
		39 | }

Check: CKV_AWS_23: "Ensure every security groups rule has a description"
	FAILED for resource: aws_security_group.db
	File: /main.tf:103-111
	Guide: https://docs.bridgecrew.io/docs/networking_31

		103 | resource "aws_security_group" "db" {
		104 |   vpc_id = aws_vpc.nondefault.id
		105 |   ingress {
		106 |     from_port = 3306
		107 |     protocol = "tcp"
		108 |     to_port = 3306
		109 |     cidr_blocks = [aws_subnet.nondefault_1.cidr_block]
		110 |   }
		111 | }

Check: CKV_AWS_226: "Ensure DB instance gets all minor upgrades automatically"
	FAILED for resource: aws_db_instance.test
	File: /main.tf:113-126
	Guide: https://docs.bridgecrew.io/docs/ensure-aws-db-instance-gets-all-minor-upgrades-automatically

		113 | resource "aws_db_instance" "test" {
		114 |   identifier = "tf-test-db"
		115 |   allocated_storage = "5"
		116 |   multi_az = "false"
		117 |   engine = "mysql"
		118 |   instance_class = "db.t2.small"
		119 |   username = "admin"
		120 |   password = "password123"
		121 |   db_subnet_group_name = aws_db_subnet_group.db.name
		122 |   vpc_security_group_ids = [ aws_security_group.db.id]
		123 |   storage_type = "gp2"
		124 |   skip_final_snapshot = true
		125 |   publicly_accessible = false
		126 | }

Check: CKV_AWS_16: "Ensure all data stored in the RDS is securely encrypted at rest"
	FAILED for resource: aws_db_instance.test
	File: /main.tf:113-126
	Guide: https://docs.bridgecrew.io/docs/general_4

		113 | resource "aws_db_instance" "test" {
		114 |   identifier = "tf-test-db"
		115 |   allocated_storage = "5"
		116 |   multi_az = "false"
		117 |   engine = "mysql"
		118 |   instance_class = "db.t2.small"
		119 |   username = "admin"
		120 |   password = "password123"
		121 |   db_subnet_group_name = aws_db_subnet_group.db.name
		122 |   vpc_security_group_ids = [ aws_security_group.db.id]
		123 |   storage_type = "gp2"
		124 |   skip_final_snapshot = true
		125 |   publicly_accessible = false
		126 | }

Check: CKV_AWS_129: "Ensure that respective logs of Amazon Relational Database Service (Amazon RDS) are enabled"
	FAILED for resource: aws_db_instance.test
	File: /main.tf:113-126
	Guide: https://docs.bridgecrew.io/docs/ensure-that-respective-logs-of-amazon-relational-database-service-amazon-rds-are-enabled

		113 | resource "aws_db_instance" "test" {
		114 |   identifier = "tf-test-db"
		115 |   allocated_storage = "5"
		116 |   multi_az = "false"
		117 |   engine = "mysql"
		118 |   instance_class = "db.t2.small"
		119 |   username = "admin"
		120 |   password = "password123"
		121 |   db_subnet_group_name = aws_db_subnet_group.db.name
		122 |   vpc_security_group_ids = [ aws_security_group.db.id]
		123 |   storage_type = "gp2"
		124 |   skip_final_snapshot = true
		125 |   publicly_accessible = false
		126 | }

Check: CKV_AWS_161: "Ensure RDS database has IAM authentication enabled"
	FAILED for resource: aws_db_instance.test
	File: /main.tf:113-126
	Guide: https://docs.bridgecrew.io/docs/ensure-rds-database-has-iam-authentication-enabled

		113 | resource "aws_db_instance" "test" {
		114 |   identifier = "tf-test-db"
		115 |   allocated_storage = "5"
		116 |   multi_az = "false"
		117 |   engine = "mysql"
		118 |   instance_class = "db.t2.small"
		119 |   username = "admin"
		120 |   password = "password123"
		121 |   db_subnet_group_name = aws_db_subnet_group.db.name
		122 |   vpc_security_group_ids = [ aws_security_group.db.id]
		123 |   storage_type = "gp2"
		124 |   skip_final_snapshot = true
		125 |   publicly_accessible = false
		126 | }

Check: CKV_AWS_157: "Ensure that RDS instances have Multi-AZ enabled"
	FAILED for resource: aws_db_instance.test
	File: /main.tf:113-126
	Guide: https://docs.bridgecrew.io/docs/general_73

		113 | resource "aws_db_instance" "test" {
		114 |   identifier = "tf-test-db"
		115 |   allocated_storage = "5"
		116 |   multi_az = "false"
		117 |   engine = "mysql"
		118 |   instance_class = "db.t2.small"
		119 |   username = "admin"
		120 |   password = "password123"
		121 |   db_subnet_group_name = aws_db_subnet_group.db.name
		122 |   vpc_security_group_ids = [ aws_security_group.db.id]
		123 |   storage_type = "gp2"
		124 |   skip_final_snapshot = true
		125 |   publicly_accessible = false
		126 | }

Check: CKV_AWS_118: "Ensure that enhanced monitoring is enabled for Amazon RDS instances"
	FAILED for resource: aws_db_instance.test
	File: /main.tf:113-126
	Guide: https://docs.bridgecrew.io/docs/ensure-that-enhanced-monitoring-is-enabled-for-amazon-rds-instances

		113 | resource "aws_db_instance" "test" {
		114 |   identifier = "tf-test-db"
		115 |   allocated_storage = "5"
		116 |   multi_az = "false"
		117 |   engine = "mysql"
		118 |   instance_class = "db.t2.small"
		119 |   username = "admin"
		120 |   password = "password123"
		121 |   db_subnet_group_name = aws_db_subnet_group.db.name
		122 |   vpc_security_group_ids = [ aws_security_group.db.id]
		123 |   storage_type = "gp2"
		124 |   skip_final_snapshot = true
		125 |   publicly_accessible = false
		126 | }

Check: CKV_AWS_24: "Ensure no security groups allow ingress from 0.0.0.0:0 to port 22"
	FAILED for resource: aws_security_group.publicly_accessible_sg
	File: /main.tf:129-143
	Guide: https://docs.bridgecrew.io/docs/networking_1-port-security

		129 | resource "aws_security_group" "publicly_accessible_sg" {
		130 |   vpc_id = aws_vpc.nondefault.id
		131 |   ingress {
		132 |     from_port = 0
		133 |     protocol = "tcp"
		134 |     to_port = 65000
		135 |     cidr_blocks = ["0.0.0.0/0"]
		136 |   }
		137 |   egress {
		138 |     from_port = 0
		139 |     protocol = "tcp"
		140 |     to_port = 65000
		141 |     cidr_blocks = ["0.0.0.0/0"]
		142 |   }
		143 | }

Check: CKV_AWS_260: "Ensure no security groups allow ingress from 0.0.0.0:0 to port 80"
	FAILED for resource: aws_security_group.publicly_accessible_sg
	File: /main.tf:129-143
	Guide: https://docs.bridgecrew.io/docs/ensure-aws-security-groups-do-not-allow-ingress-from-00000-to-port-80

		129 | resource "aws_security_group" "publicly_accessible_sg" {
		130 |   vpc_id = aws_vpc.nondefault.id
		131 |   ingress {
		132 |     from_port = 0
		133 |     protocol = "tcp"
		134 |     to_port = 65000
		135 |     cidr_blocks = ["0.0.0.0/0"]
		136 |   }
		137 |   egress {
		138 |     from_port = 0
		139 |     protocol = "tcp"
		140 |     to_port = 65000
		141 |     cidr_blocks = ["0.0.0.0/0"]
		142 |   }
		143 | }

Check: CKV_AWS_23: "Ensure every security groups rule has a description"
	FAILED for resource: aws_security_group.publicly_accessible_sg
	File: /main.tf:129-143
	Guide: https://docs.bridgecrew.io/docs/networking_31

		129 | resource "aws_security_group" "publicly_accessible_sg" {
		130 |   vpc_id = aws_vpc.nondefault.id
		131 |   ingress {
		132 |     from_port = 0
		133 |     protocol = "tcp"
		134 |     to_port = 65000
		135 |     cidr_blocks = ["0.0.0.0/0"]
		136 |   }
		137 |   egress {
		138 |     from_port = 0
		139 |     protocol = "tcp"
		140 |     to_port = 65000
		141 |     cidr_blocks = ["0.0.0.0/0"]
		142 |   }
		143 | }

Check: CKV_AWS_25: "Ensure no security groups allow ingress from 0.0.0.0:0 to port 3389"
	FAILED for resource: aws_security_group.publicly_accessible_sg
	File: /main.tf:129-143
	Guide: https://docs.bridgecrew.io/docs/networking_2

		129 | resource "aws_security_group" "publicly_accessible_sg" {
		130 |   vpc_id = aws_vpc.nondefault.id
		131 |   ingress {
		132 |     from_port = 0
		133 |     protocol = "tcp"
		134 |     to_port = 65000
		135 |     cidr_blocks = ["0.0.0.0/0"]
		136 |   }
		137 |   egress {
		138 |     from_port = 0
		139 |     protocol = "tcp"
		140 |     to_port = 65000
		141 |     cidr_blocks = ["0.0.0.0/0"]
		142 |   }
		143 | }

Check: CKV_AWS_126: "Ensure that detailed monitoring is enabled for EC2 instances"
	FAILED for resource: aws_instance.public_ins
	File: /main.tf:146-152
	Guide: https://docs.bridgecrew.io/docs/ensure-that-detailed-monitoring-is-enabled-for-ec2-instances

		146 | resource "aws_instance" "public_ins" {
		147 |   ami = "ami-0130bec6e5047f596"
		148 |   instance_type = "t3.nano"
		149 |   associate_public_ip_address = true
		150 |   vpc_security_group_ids = [aws_security_group.publicly_accessible_sg.id]
		151 |   subnet_id = aws_subnet.nondefault_1.id
		152 | }
Check: CKV_AWS_135: "Ensure that EC2 is EBS optimized"
	FAILED for resource: aws_instance.public_ins
	File: /main.tf:146-152
	Guide: https://docs.bridgecrew.io/docs/ensure-that-ec2-is-ebs-optimized

		146 | resource "aws_instance" "public_ins" {
		147 |   ami = "ami-0130bec6e5047f596"
		148 |   instance_type = "t3.nano"
		149 |   associate_public_ip_address = true
		150 |   vpc_security_group_ids = [aws_security_group.publicly_accessible_sg.id]
		151 |   subnet_id = aws_subnet.nondefault_1.id
		152 | }
Check: CKV_AWS_79: "Ensure Instance Metadata Service Version 1 is not enabled"
	FAILED for resource: aws_instance.public_ins
	File: /main.tf:146-152
	Guide: https://docs.bridgecrew.io/docs/bc_aws_general_31

		146 | resource "aws_instance" "public_ins" {
		147 |   ami = "ami-0130bec6e5047f596"
		148 |   instance_type = "t3.nano"
		149 |   associate_public_ip_address = true
		150 |   vpc_security_group_ids = [aws_security_group.publicly_accessible_sg.id]
		151 |   subnet_id = aws_subnet.nondefault_1.id
		152 | }
Check: CKV_AWS_88: "EC2 instance should not have public IP."
	FAILED for resource: aws_instance.public_ins
	File: /main.tf:146-152
	Guide: https://docs.bridgecrew.io/docs/public_12

		146 | resource "aws_instance" "public_ins" {
		147 |   ami = "ami-0130bec6e5047f596"
		148 |   instance_type = "t3.nano"
		149 |   associate_public_ip_address = true
		150 |   vpc_security_group_ids = [aws_security_group.publicly_accessible_sg.id]
		151 |   subnet_id = aws_subnet.nondefault_1.id
		152 | }
Check: CKV_AWS_8: "Ensure all data stored in the Launch configuration or instance Elastic Blocks Store is securely encrypted"
	FAILED for resource: aws_instance.public_ins
	File: /main.tf:146-152
	Guide: https://docs.bridgecrew.io/docs/general_13

		146 | resource "aws_instance" "public_ins" {
		147 |   ami = "ami-0130bec6e5047f596"
		148 |   instance_type = "t3.nano"
		149 |   associate_public_ip_address = true
		150 |   vpc_security_group_ids = [aws_security_group.publicly_accessible_sg.id]
		151 |   subnet_id = aws_subnet.nondefault_1.id
		152 | }
Check: CKV2_AWS_41: "Ensure an IAM role is attached to EC2 instance"
	FAILED for resource: aws_instance.public_ins
	File: /main.tf:146-152

		146 | resource "aws_instance" "public_ins" {
		147 |   ami = "ami-0130bec6e5047f596"
		148 |   instance_type = "t3.nano"
		149 |   associate_public_ip_address = true
		150 |   vpc_security_group_ids = [aws_security_group.publicly_accessible_sg.id]
		151 |   subnet_id = aws_subnet.nondefault_1.id
		152 | }
Check: CKV2_AWS_11: "Ensure VPC flow logging is enabled in all VPCs"
	FAILED for resource: aws_vpc.nondefault
	File: /main.tf:10-12
	Guide: https://docs.bridgecrew.io/docs/logging_9-enable-vpc-flow-logging

		10 | resource "aws_vpc" "nondefault" {
		11 |   cidr_block = "10.1.1.0/24"
		12 | }

Check: CKV2_AWS_12: "Ensure the default security group of every VPC restricts all traffic"
	FAILED for resource: aws_vpc.nondefault
	File: /main.tf:10-12
	Guide: https://docs.bridgecrew.io/docs/networking_4

		10 | resource "aws_vpc" "nondefault" {
		11 |   cidr_block = "10.1.1.0/24"
		12 | }

secrets scan results:

Passed checks: 0, Failed checks: 1, Skipped checks: 0

Check: CKV_SECRET_6: "Base64 High Entropy String"
	FAILED for resource: cbfdac6008f9cab4083784cbd1874f76618d2a97
	File: /main.tf:120-121
	Guide: https://docs.bridgecrew.io/docs/git_secrets_6

		120 |   password = "pa*********"


