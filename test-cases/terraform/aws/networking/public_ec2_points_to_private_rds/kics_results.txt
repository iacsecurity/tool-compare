
                   .0MO.                                    
                   OMMMx                                    
                   ;NMX;                                    
                    ...           ...              ....     
WMMMd     cWMMM0.  KMMMO      ;xKWMMMMNOc.     ,xXMMMMMWXkc.
WMMMd   .0MMMN:    KMMMO    :XMMMMMMMMMMMWl   xMMMMMWMMMMMMl
WMMMd  lWMMMO.     KMMMO   xMMMMKc...'lXMk   ,MMMMx   .;dXx 
WMMMd.0MMMX;       KMMMO  cMMMMd        '    'MMMMNl'       
WMMMNWMMMMl        KMMMO  0MMMN               oMMMMMMMXkl.  
WMMMMMMMMMMo       KMMMO  0MMMX                .ckKWMMMMMM0.
WMMMMWokMMMMk      KMMMO  oMMMMc              .     .:OMMMM0
WMMMK.  dMMMM0.    KMMMO   KMMMMx'    ,kNc   :WOc.    .NMMMX
WMMMd    cWMMMX.   KMMMO    kMMMMMWXNMMMMMd .WMMMMWKO0NMMMMl
WMMMd     ,NMMMN,  KMMMO     'xNMMMMMMMNx,   .l0WMMMMMMMWk, 
xkkk:      ,kkkkx  okkkl        ;xKXKx;          ;dOKKkc    


Scanning with Keeping Infrastructure as Code Secure v1.3.1




Files scanned: 1
Parsed files: 1
Queries loaded: 559
Queries failed to execute: 0

------------------------------------

Security Group Without Description, Severity: INFO, Results: 2
Description: It's considered a best practice for AWS Security Group to have a description
Platform: Terraform

	[1]: /src/main.tf:103

		102: 
		103: resource "aws_security_group" "db" {
		104:   vpc_id = aws_vpc.nondefault.id


	[2]: /src/main.tf:129

		128: 
		129: resource "aws_security_group" "publicly_accessible_sg" {
		130:   vpc_id = aws_vpc.nondefault.id


Security Group Rules Without Description, Severity: INFO, Results: 3
Description: It's considered a best practice for all rules in AWS Security Group to have a description
Platform: Terraform

	[1]: /src/main.tf:105

		104:   vpc_id = aws_vpc.nondefault.id
		105:   ingress {
		106:     from_port = 3306


	[2]: /src/main.tf:137

		136:   }
		137:   egress {
		138:     from_port = 0


	[3]: /src/main.tf:131

		130:   vpc_id = aws_vpc.nondefault.id
		131:   ingress {
		132:     from_port = 0


Resource Not Using Tags, Severity: INFO, Results: 12
Description: AWS services resource tags are an essential part of managing components
Platform: Terraform

	[1]: /src/main.tf:68

		067: 
		068: resource "aws_subnet" "nondefault_1" {
		069:   vpc_id = aws_vpc.nondefault.id


	[2]: /src/main.tf:74

		073: 
		074: resource "aws_subnet" "nondefault_2" {
		075:   vpc_id = aws_vpc.nondefault.id


	[3]: /src/main.tf:97

		096: 
		097: resource "aws_db_subnet_group" "db" {
		098:   name = "rds_db"


	[4]: /src/main.tf:84

		083: 
		084: resource aws_route_table "nondefault_1" {
		085:   vpc_id = aws_vpc.nondefault.id


	[5]: /src/main.tf:80

		079: 
		080: resource "aws_internet_gateway" "igw" {
		081:   vpc_id = aws_vpc.nondefault.id


	[6]: /src/main.tf:113

		112: 
		113: resource "aws_db_instance" "test" {
		114:   identifier = "tf-test-db"


	[7]: /src/main.tf:129

		128: 
		129: resource "aws_security_group" "publicly_accessible_sg" {
		130:   vpc_id = aws_vpc.nondefault.id


	[8]: /src/main.tf:103

		102: 
		103: resource "aws_security_group" "db" {
		104:   vpc_id = aws_vpc.nondefault.id


	[9]: /src/main.tf:146

		145: // This instance is can potentially be used to hop into the DB
		146: resource "aws_instance" "public_ins" {
		147:   ami = "ami-0130bec6e5047f596"


	[10]: /src/main.tf:10

		009: 
		010: resource "aws_vpc" "nondefault" {
		011:   cidr_block = "10.1.1.0/24"


	[11]: /src/main.tf:36

		035: 
		036:   tags = {
		037:     Name = "main"


	[12]: /src/main.tf:63

		062: 
		063:   tags = {
		064:     Name = "main"


RDS Without Logging, Severity: INFO, Results: 1
Description: RDS does not have any kind of logger
Platform: Terraform

	[1]: /src/main.tf:113

		112: 
		113: resource "aws_db_instance" "test" {
		114:   identifier = "tf-test-db"


EC2 Not EBS Optimized, Severity: INFO, Results: 1
Description: It's considered a best practice for an EC2 instance to use an EBS optimized instance. This provides the best performance for your EBS volumes by minimizing contention between Amazon EBS I/O and other traffic from your instance
Platform: Terraform

	[1]: /src/main.tf:146

		145: // This instance is can potentially be used to hop into the DB
		146: resource "aws_instance" "public_ins" {
		147:   ami = "ami-0130bec6e5047f596"


EC2 Instance Monitoring Disabled, Severity: INFO, Results: 1
Description: EC2 Instance should have detailed monitoring enabled. With detailed monitoring enabled data is available in 1-minute periods
Platform: Terraform

	[1]: /src/main.tf:146

		145: // This instance is can potentially be used to hop into the DB
		146: resource "aws_instance" "public_ins" {
		147:   ami = "ami-0130bec6e5047f596"


VPC FlowLogs Disabled, Severity: MEDIUM, Results: 1
Description: VPC hasn't got any FlowLog associated
Platform: Terraform

	[1]: /src/main.tf:10

		009: 
		010: resource "aws_vpc" "nondefault" {
		011:   cidr_block = "10.1.1.0/24"


SQL Analysis Services Port 2383 (TCP) Is Publicly Accessible, Severity: MEDIUM, Results: 1
Description: Check if port 2383 on TCP is publicly accessible by checking the CIDR block range that can access it.
Platform: Terraform

	[1]: /src/main.tf:131

		130:   vpc_id = aws_vpc.nondefault.id
		131:   ingress {
		132:     from_port = 0


RDS With Backup Disabled, Severity: MEDIUM, Results: 1
Description: RDS configured without backup
Platform: Terraform

	[1]: /src/main.tf:113

		112: 
		113: resource "aws_db_instance" "test" {
		114:   identifier = "tf-test-db"


Unrestricted Security Group Ingress, Severity: HIGH, Results: 1
Description: Security groups allow ingress from 0.0.0.0:0
Platform: Terraform

	[1]: /src/main.tf:135

		134:     to_port = 65000
		135:     cidr_blocks = ["0.0.0.0/0"]
		136:   }


Unknown Port Exposed To Internet, Severity: HIGH, Results: 1
Description: AWS Security Group should not have an unknown port exposed to the entire Internet
Platform: Terraform

	[1]: /src/main.tf:135

		134:     to_port = 65000
		135:     cidr_blocks = ["0.0.0.0/0"]
		136:   }


Sensitive Port Is Exposed To Entire Network, Severity: HIGH, Results: 52
Description: A sensitive port, such as port 23 or port 110, is open for the whole network in either TCP or UDP protocol
Platform: Terraform

	[1]: /src/main.tf:131

		130:   vpc_id = aws_vpc.nondefault.id
		131:   ingress {
		132:     from_port = 0


	[2]: /src/main.tf:131

		130:   vpc_id = aws_vpc.nondefault.id
		131:   ingress {
		132:     from_port = 0


	[3]: /src/main.tf:131

		130:   vpc_id = aws_vpc.nondefault.id
		131:   ingress {
		132:     from_port = 0


	[4]: /src/main.tf:131

		130:   vpc_id = aws_vpc.nondefault.id
		131:   ingress {
		132:     from_port = 0


	[5]: /src/main.tf:131

		130:   vpc_id = aws_vpc.nondefault.id
		131:   ingress {
		132:     from_port = 0


	[6]: /src/main.tf:131

		130:   vpc_id = aws_vpc.nondefault.id
		131:   ingress {
		132:     from_port = 0


	[7]: /src/main.tf:131

		130:   vpc_id = aws_vpc.nondefault.id
		131:   ingress {
		132:     from_port = 0


	[8]: /src/main.tf:131

		130:   vpc_id = aws_vpc.nondefault.id
		131:   ingress {
		132:     from_port = 0


	[9]: /src/main.tf:131

		130:   vpc_id = aws_vpc.nondefault.id
		131:   ingress {
		132:     from_port = 0


	[10]: /src/main.tf:131

		130:   vpc_id = aws_vpc.nondefault.id
		131:   ingress {
		132:     from_port = 0


	[11]: /src/main.tf:131

		130:   vpc_id = aws_vpc.nondefault.id
		131:   ingress {
		132:     from_port = 0


	[12]: /src/main.tf:131

		130:   vpc_id = aws_vpc.nondefault.id
		131:   ingress {
		132:     from_port = 0


	[13]: /src/main.tf:131

		130:   vpc_id = aws_vpc.nondefault.id
		131:   ingress {
		132:     from_port = 0


	[14]: /src/main.tf:131

		130:   vpc_id = aws_vpc.nondefault.id
		131:   ingress {
		132:     from_port = 0


	[15]: /src/main.tf:131

		130:   vpc_id = aws_vpc.nondefault.id
		131:   ingress {
		132:     from_port = 0


	[16]: /src/main.tf:131

		130:   vpc_id = aws_vpc.nondefault.id
		131:   ingress {
		132:     from_port = 0


	[17]: /src/main.tf:131

		130:   vpc_id = aws_vpc.nondefault.id
		131:   ingress {
		132:     from_port = 0


	[18]: /src/main.tf:131

		130:   vpc_id = aws_vpc.nondefault.id
		131:   ingress {
		132:     from_port = 0


	[19]: /src/main.tf:131

		130:   vpc_id = aws_vpc.nondefault.id
		131:   ingress {
		132:     from_port = 0


	[20]: /src/main.tf:131

		130:   vpc_id = aws_vpc.nondefault.id
		131:   ingress {
		132:     from_port = 0


	[21]: /src/main.tf:131

		130:   vpc_id = aws_vpc.nondefault.id
		131:   ingress {
		132:     from_port = 0


	[22]: /src/main.tf:131

		130:   vpc_id = aws_vpc.nondefault.id
		131:   ingress {
		132:     from_port = 0


	[23]: /src/main.tf:131

		130:   vpc_id = aws_vpc.nondefault.id
		131:   ingress {
		132:     from_port = 0


	[24]: /src/main.tf:131

		130:   vpc_id = aws_vpc.nondefault.id
		131:   ingress {
		132:     from_port = 0


	[25]: /src/main.tf:131

		130:   vpc_id = aws_vpc.nondefault.id
		131:   ingress {
		132:     from_port = 0


	[26]: /src/main.tf:131

		130:   vpc_id = aws_vpc.nondefault.id
		131:   ingress {
		132:     from_port = 0


	[27]: /src/main.tf:131

		130:   vpc_id = aws_vpc.nondefault.id
		131:   ingress {
		132:     from_port = 0


	[28]: /src/main.tf:131

		130:   vpc_id = aws_vpc.nondefault.id
		131:   ingress {
		132:     from_port = 0


	[29]: /src/main.tf:131

		130:   vpc_id = aws_vpc.nondefault.id
		131:   ingress {
		132:     from_port = 0


	[30]: /src/main.tf:131

		130:   vpc_id = aws_vpc.nondefault.id
		131:   ingress {
		132:     from_port = 0


	[31]: /src/main.tf:131

		130:   vpc_id = aws_vpc.nondefault.id
		131:   ingress {
		132:     from_port = 0


	[32]: /src/main.tf:131

		130:   vpc_id = aws_vpc.nondefault.id
		131:   ingress {
		132:     from_port = 0


	[33]: /src/main.tf:131

		130:   vpc_id = aws_vpc.nondefault.id
		131:   ingress {
		132:     from_port = 0


	[34]: /src/main.tf:131

		130:   vpc_id = aws_vpc.nondefault.id
		131:   ingress {
		132:     from_port = 0


	[35]: /src/main.tf:131

		130:   vpc_id = aws_vpc.nondefault.id
		131:   ingress {
		132:     from_port = 0


	[36]: /src/main.tf:131

		130:   vpc_id = aws_vpc.nondefault.id
		131:   ingress {
		132:     from_port = 0


	[37]: /src/main.tf:131

		130:   vpc_id = aws_vpc.nondefault.id
		131:   ingress {
		132:     from_port = 0


	[38]: /src/main.tf:131

		130:   vpc_id = aws_vpc.nondefault.id
		131:   ingress {
		132:     from_port = 0


	[39]: /src/main.tf:131

		130:   vpc_id = aws_vpc.nondefault.id
		131:   ingress {
		132:     from_port = 0


	[40]: /src/main.tf:131

		130:   vpc_id = aws_vpc.nondefault.id
		131:   ingress {
		132:     from_port = 0


	[41]: /src/main.tf:131

		130:   vpc_id = aws_vpc.nondefault.id
		131:   ingress {
		132:     from_port = 0


	[42]: /src/main.tf:131

		130:   vpc_id = aws_vpc.nondefault.id
		131:   ingress {
		132:     from_port = 0


	[43]: /src/main.tf:131

		130:   vpc_id = aws_vpc.nondefault.id
		131:   ingress {
		132:     from_port = 0


	[44]: /src/main.tf:131

		130:   vpc_id = aws_vpc.nondefault.id
		131:   ingress {
		132:     from_port = 0


	[45]: /src/main.tf:131

		130:   vpc_id = aws_vpc.nondefault.id
		131:   ingress {
		132:     from_port = 0


	[46]: /src/main.tf:131

		130:   vpc_id = aws_vpc.nondefault.id
		131:   ingress {
		132:     from_port = 0


	[47]: /src/main.tf:131

		130:   vpc_id = aws_vpc.nondefault.id
		131:   ingress {
		132:     from_port = 0


	[48]: /src/main.tf:131

		130:   vpc_id = aws_vpc.nondefault.id
		131:   ingress {
		132:     from_port = 0


	[49]: /src/main.tf:131

		130:   vpc_id = aws_vpc.nondefault.id
		131:   ingress {
		132:     from_port = 0


	[50]: /src/main.tf:131

		130:   vpc_id = aws_vpc.nondefault.id
		131:   ingress {
		132:     from_port = 0


	[51]: /src/main.tf:131

		130:   vpc_id = aws_vpc.nondefault.id
		131:   ingress {
		132:     from_port = 0


	[52]: /src/main.tf:131

		130:   vpc_id = aws_vpc.nondefault.id
		131:   ingress {
		132:     from_port = 0


Security Group With Unrestricted Access To SSH, Severity: HIGH, Results: 1
Description: SSH' (TCP:22) should not be public in AWS Security Group
Platform: Terraform

	[1]: /src/main.tf:135

		134:     to_port = 65000
		135:     cidr_blocks = ["0.0.0.0/0"]
		136:   }


Remote Desktop Port Open, Severity: HIGH, Results: 1
Description: The Remote Desktop port is open in a Security Group
Platform: Terraform

	[1]: /src/main.tf:129

		128: 
		129: resource "aws_security_group" "publicly_accessible_sg" {
		130:   vpc_id = aws_vpc.nondefault.id


Passwords And Secrets In Infrastructure Code, Severity: HIGH, Results: 1
Description: Query to find passwords and secrets in infrastructure code.
Platform: Common

	[1]: /src/main.tf:120

		119:   username = "admin"
		120:   password = "password123"
		121:   db_subnet_group_name = aws_db_subnet_group.db.name


IAM Database Auth Not Enabled, Severity: HIGH, Results: 1
Description: IAM Database Auth Enabled must be configured to true
Platform: Terraform

	[1]: /src/main.tf:113

		112: 
		113: resource "aws_db_instance" "test" {
		114:   identifier = "tf-test-db"


HTTP Port Open, Severity: HIGH, Results: 1
Description: The HTTP port is open in a Security Group
Platform: Terraform

	[1]: /src/main.tf:129

		128: 
		129: resource "aws_security_group" "publicly_accessible_sg" {
		130:   vpc_id = aws_vpc.nondefault.id


EC2 Instance Has Public IP, Severity: HIGH, Results: 1
Description: EC2 Instance should not have a public IP address.
Platform: Terraform

	[1]: /src/main.tf:149

		148:   instance_type = "t3.nano"
		149:   associate_public_ip_address = true
		150:   vpc_security_group_ids = [aws_security_group.publicly_accessible_sg.id]


DB Instance Storage Not Encrypted, Severity: HIGH, Results: 1
Description: The parameter storage_encrypted in aws_db_instance must be set to 'true' (the default is 'false').
Platform: Terraform

	[1]: /src/main.tf:113

		112: 
		113: resource "aws_db_instance" "test" {
		114:   identifier = "tf-test-db"



Results Summary:
HIGH: 61
MEDIUM: 3
LOW: 0
INFO: 20
TOTAL: 84

Scan duration: 19.560030759s
