[38;2;34;187;51m
                   .0MO.                                    
                   OMMMx                                    
                   ;NMX;                                    
                    ...           ...              ....     
WMMMd     cWMMM0.  KMMMO      ;xKWMMMMNOc.     ,xXMMMMMWXkc.
WMMMd   .0MMMN:    KMMMO    :XMMMMMMMMMMMWl   xMMMMMWMMMMMMl
WMMMd  lWMMMO.     KMMMO   xMMMMKc...'lXMk   ,MMMMx   .;dXx 
WMMMd.0MMMX;       KMMMO  cMMMMd        '    'MMMMNl'       
WMMMNWMMMMl        KMMMO  0MMMN               oMMMMMMMXkl.  
WMMMMMMMMMMo       KMMMO  0MMMX                .ckKWMMMMMM0.
WMMMMWokMMMMk      KMMMO  oMMMMc              .     .:OMMMM0
WMMMK.  dMMMM0.    KMMMO   KMMMMx'    ,kNc   :WOc.    .NMMMX
WMMMd    cWMMMX.   KMMMO    kMMMMMWXNMMMMMd .WMMMMWKO0NMMMMl
WMMMd     ,NMMMN,  KMMMO     'xNMMMMMMMNx,   .l0WMMMMMMMWk, 
xkkk:      ,kkkkx  okkkl        ;xKXKx;          ;dOKKkc    

[0m
Scanning with Keeping Infrastructure as Code Secure v1.6.5



Files scanned: 1
Parsed files: 1
Queries loaded: 1039
Queries failed to execute: 0

------------------------------------

[38;2;91;192;222mResource Not Using Tags[0m, Severity: [38;2;91;192;222mINFO[0m, Results: 9
[1mDescription:[0m AWS services resource tags are an essential part of managing components. As a best practice, the field 'tags' should have additional tags defined other than 'Name'
[1mPlatform:[0m Terraform

	[38;2;91;192;222m[1]:[0m ../../src/main.tf:[38;2;34;187;51m75[0m

		074: 
[38;2;240;173;78m		075:   tags = {
[0m		076:     Name = "HelloWorld"


	[38;2;91;192;222m[2]:[0m ../../src/main.tf:[38;2;34;187;51m19[0m

		018: 
[38;2;240;173;78m		019:   tags = {
[0m		020:     Name = "HelloWorld"


	[38;2;91;192;222m[3]:[0m ../../src/main.tf:[38;2;34;187;51m45[0m

		044: 
[38;2;240;173;78m		045: resource "aws_instance" "example_with_new_ami" {
[0m		046:   ami = aws_ami.example.id


	[38;2;91;192;222m[4]:[0m ../../src/main.tf:[38;2;34;187;51m93[0m

		092: 
[38;2;240;173;78m		093: resource "aws_instance" "example_with_ami_from_instance" {
[0m		094:   ami = aws_ami_from_instance.example.id


	[38;2;91;192;222m[5]:[0m ../../src/main.tf:[38;2;34;187;51m32[0m

		031: 
[38;2;240;173;78m		032: resource "aws_ami" "example" {
[0m		033:   name                = "terraform-example"


	[38;2;91;192;222m[6]:[0m ../../src/main.tf:[38;2;34;187;51m80[0m

		079: 
[38;2;240;173;78m		080: resource "aws_instance" "example_with_copied_ami" {
[0m		081:   ami = aws_ami_copy.example.id


	[38;2;91;192;222m[7]:[0m ../../src/main.tf:[38;2;34;187;51m102[0m

		101:   
[38;2;240;173;78m		102:   tags = {
[0m		103:     Name = "public-ubuntu-from-data"


	[38;2;91;192;222m[8]:[0m ../../src/main.tf:[38;2;34;187;51m88[0m

		087: 
[38;2;240;173;78m		088: resource "aws_ami_from_instance" "example" {
[0m		089:   name               = "terraform-example3"


	[38;2;91;192;222m[9]:[0m ../../src/main.tf:[38;2;34;187;51m27[0m

		026: 
[38;2;240;173;78m		027:   tags = {
[0m		028:     Name = "HelloWorld_snap"


[38;2;91;192;222mName Is Not Snake Case[0m, Severity: [38;2;91;192;222mINFO[0m, Results: 1
[1mDescription:[0m All names should follow snake case pattern.
[1mPlatform:[0m Terraform

	[38;2;91;192;222m[1]:[0m ../../src/main.tf:[38;2;34;187;51m98[0m

		097: 
[38;2;240;173;78m		098: resource "aws_instance" "public-ubuntu-from-data" {
[0m		099:   ami           = data.aws_ami.ubuntu.id


[38;2;91;192;222mEC2 Not EBS Optimized[0m, Severity: [38;2;91;192;222mINFO[0m, Results: 1
[1mDescription:[0m It's considered a best practice for an EC2 instance to use an EBS optimized instance. This provides the best performance for your EBS volumes by minimizing contention between Amazon EBS I/O and other traffic from your instance
[1mPlatform:[0m Terraform

	[38;2;91;192;222m[1]:[0m ../../src/main.tf:[38;2;34;187;51m98[0m

		097: 
[38;2;240;173;78m		098: resource "aws_instance" "public-ubuntu-from-data" {
[0m		099:   ami           = data.aws_ami.ubuntu.id


[38;2;91;192;222mEC2 Instance Monitoring Disabled[0m, Severity: [38;2;91;192;222mINFO[0m, Results: 4
[1mDescription:[0m EC2 Instance should have detailed monitoring enabled. With detailed monitoring enabled data is available in 1-minute periods
[1mPlatform:[0m Terraform

	[38;2;91;192;222m[1]:[0m ../../src/main.tf:[38;2;34;187;51m80[0m

		079: 
[38;2;240;173;78m		080: resource "aws_instance" "example_with_copied_ami" {
[0m		081:   ami = aws_ami_copy.example.id


	[38;2;91;192;222m[2]:[0m ../../src/main.tf:[38;2;34;187;51m45[0m

		044: 
[38;2;240;173;78m		045: resource "aws_instance" "example_with_new_ami" {
[0m		046:   ami = aws_ami.example.id


	[38;2;91;192;222m[3]:[0m ../../src/main.tf:[38;2;34;187;51m98[0m

		097: 
[38;2;240;173;78m		098: resource "aws_instance" "public-ubuntu-from-data" {
[0m		099:   ami           = data.aws_ami.ubuntu.id


	[38;2;91;192;222m[4]:[0m ../../src/main.tf:[38;2;34;187;51m93[0m

		092: 
[38;2;240;173;78m		093: resource "aws_instance" "example_with_ami_from_instance" {
[0m		094:   ami = aws_ami_from_instance.example.id


[38;2;237;213;126mIAM Access Analyzer Not Enabled[0m, Severity: [38;2;237;213;126mLOW[0m, Results: 1
[1mDescription:[0m IAM Access Analyzer should be enabled and configured to continuously monitor resource permissions
[1mPlatform:[0m Terraform

	[38;2;237;213;126m[1]:[0m ../../src/main.tf:[38;2;34;187;51m15[0m

		014: 
[38;2;240;173;78m		015: resource "aws_ebs_volume" "example" {
[0m		016:   availability_zone = data.aws_availability_zones.available.names[0]


[38;2;255;114;19mInstance With No VPC[0m, Severity: [38;2;255;114;19mMEDIUM[0m, Results: 4
[1mDescription:[0m EC2 Instances should be configured under a VPC network. AWS VPCs provide the controls to facilitate a formal process for approving and testing all network connections and changes to the firewall and router configurations.
[1mPlatform:[0m Terraform

	[38;2;255;114;19m[1]:[0m ../../src/main.tf:[38;2;34;187;51m80[0m

		079: 
[38;2;240;173;78m		080: resource "aws_instance" "example_with_copied_ami" {
[0m		081:   ami = aws_ami_copy.example.id


	[38;2;255;114;19m[2]:[0m ../../src/main.tf:[38;2;34;187;51m98[0m

		097: 
[38;2;240;173;78m		098: resource "aws_instance" "public-ubuntu-from-data" {
[0m		099:   ami           = data.aws_ami.ubuntu.id


	[38;2;255;114;19m[3]:[0m ../../src/main.tf:[38;2;34;187;51m93[0m

		092: 
[38;2;240;173;78m		093: resource "aws_instance" "example_with_ami_from_instance" {
[0m		094:   ami = aws_ami_from_instance.example.id


	[38;2;255;114;19m[4]:[0m ../../src/main.tf:[38;2;34;187;51m45[0m

		044: 
[38;2;240;173;78m		045: resource "aws_instance" "example_with_new_ami" {
[0m		046:   ami = aws_ami.example.id


[38;2;255;114;19mEBS Volume Encryption Disabled[0m, Severity: [38;2;255;114;19mMEDIUM[0m, Results: 1
[1mCIS ID:[0m CIS Security - CIS Amazon Web Services Foundations Benchmark v1.4.0 - Rule 2.2.1
[1mTitle:[0m Ensure EBS volume encryption is enabled
[1mDescription:[0m Elastic Compute Cloud (EC2) supports encryption at rest when using the Elastic Block Store (EBS) service. While disabled by default, forcing encryption at EBS volume creation is supported.
Encrypting data at rest reduces the likelihood that it is unintentionally exposed and can nullify the impact of disclosure if the encryption remains unbroken.
[1mPlatform:[0m Terraform

	[38;2;255;114;19m[1]:[0m ../../src/main.tf:[38;2;34;187;51m15[0m

		014: 
[38;2;240;173;78m		015: resource "aws_ebs_volume" "example" {
[0m		016:   availability_zone = data.aws_availability_zones.available.names[0]


[38;2;187;33;36mEC2 Instance Has Public IP[0m, Severity: [38;2;187;33;36mHIGH[0m, Results: 4
[1mDescription:[0m EC2 Instance should not have a public IP address.
[1mPlatform:[0m Terraform

	[38;2;187;33;36m[1]:[0m ../../src/main.tf:[38;2;34;187;51m93[0m

		092: 
[38;2;240;173;78m		093: resource "aws_instance" "example_with_ami_from_instance" {
[0m		094:   ami = aws_ami_from_instance.example.id


	[38;2;187;33;36m[2]:[0m ../../src/main.tf:[38;2;34;187;51m80[0m

		079: 
[38;2;240;173;78m		080: resource "aws_instance" "example_with_copied_ami" {
[0m		081:   ami = aws_ami_copy.example.id


	[38;2;187;33;36m[3]:[0m ../../src/main.tf:[38;2;34;187;51m98[0m

		097: 
[38;2;240;173;78m		098: resource "aws_instance" "public-ubuntu-from-data" {
[0m		099:   ami           = data.aws_ami.ubuntu.id


	[38;2;187;33;36m[4]:[0m ../../src/main.tf:[38;2;34;187;51m45[0m

		044: 
[38;2;240;173;78m		045: resource "aws_instance" "example_with_new_ami" {
[0m		046:   ami = aws_ami.example.id


[38;2;187;33;36mEBS Volume Snapshot Not Encrypted[0m, Severity: [38;2;187;33;36mHIGH[0m, Results: 1
[1mDescription:[0m The value on AWS EBS Volume Snapshot Encryptation must be true
[1mPlatform:[0m Terraform

	[38;2;187;33;36m[1]:[0m ../../src/main.tf:[38;2;34;187;51m24[0m

		023: 
[38;2;240;173;78m		024: resource "aws_ebs_snapshot" "example_snapshot" {
[0m		025:   volume_id = aws_ebs_volume.example.id


[38;2;187;33;36mAMI Not Encrypted[0m, Severity: [38;2;187;33;36mHIGH[0m, Results: 1
[1mDescription:[0m AWS AMI Encryption is not enabled
[1mPlatform:[0m Terraform

	[38;2;187;33;36m[1]:[0m ../../src/main.tf:[38;2;34;187;51m38[0m

		037: 
[38;2;240;173;78m		038:   ebs_block_device {
[0m		039:     device_name = "/dev/xvda"



Results Summary:
[38;2;187;33;36mHIGH[0m: 6
[38;2;255;114;19mMEDIUM[0m: 5
[38;2;237;213;126mLOW[0m: 1
[38;2;91;192;222mINFO[0m: 15
TOTAL: 27

Scan duration: 15.49099234s
