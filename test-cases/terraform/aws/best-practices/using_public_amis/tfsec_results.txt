
  Result 1

  [aws-ebs-enable-volume-encryption][HIGH] Resource 'aws_ebs_volume.example' uses default value for encrypted
  /src/main.tf:15-22


      12 | 
      13 | /*** Simple AMI creation ****/
      14 | 
      15 | resource "aws_ebs_volume" "example" {
      16 |   availability_zone = data.aws_availability_zones.available.names[0]
      17 |   size              = 40
      18 | 
      19 |   tags = {
      20 |     Name = "HelloWorld"
      21 |   }
      22 | }
      23 | 
      24 | resource "aws_ebs_snapshot" "example_snapshot" {
      25 |   volume_id = aws_ebs_volume.example.id

  Impact:     Unencrypted sensitive data is vulnerable to compromise.
  Resolution: Enable encryption of EBS volumes

  More Info:
  - https://aquasecurity.github.io/tfsec/latest/checks/aws/ebs/enable-volume-encryption 
  - https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/ebs_volume#encrypted 

  Result 2

  [aws-ebs-encryption-customer-key][LOW] Resource 'aws_ebs_volume.example' does not use CMK
  /src/main.tf:15-22


      12 | 
      13 | /*** Simple AMI creation ****/
      14 | 
      15 | resource "aws_ebs_volume" "example" {
      16 |   availability_zone = data.aws_availability_zones.available.names[0]
      17 |   size              = 40
      18 | 
      19 |   tags = {
      20 |     Name = "HelloWorld"
      21 |   }
      22 | }
      23 | 
      24 | resource "aws_ebs_snapshot" "example_snapshot" {
      25 |   volume_id = aws_ebs_volume.example.id

  Impact:     Using AWS managed keys does not allow for fine grained control
  Resolution: Enable encryption using customer managed keys

  More Info:
  - https://aquasecurity.github.io/tfsec/latest/checks/aws/ebs/encryption-customer-key 
  - https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/ebs_volume#kms_key_id 

  Result 3

  [aws-ec2-enforce-http-token-imds][HIGH] Resource 'aws_instance.public-ubuntu-from-data' is missing `metadata_options` block - it is required with `http_tokens` set to `required` to make Instance Metadata Service more secure.
  /src/main.tf:98-105


      95 |   instance_type = "t3.nano"
      96 | }
      97 | 
      98 | resource "aws_instance" "public-ubuntu-from-data" {
      99 |   ami           = data.aws_ami.ubuntu.id
     100 |   instance_type = "t2.micro"
     101 |   
     102 |   tags = {
     103 |     Name = "public-ubuntu-from-data"
     104 |   }
     105 | }
     106 | 

  Legacy ID:  AWS079
  Impact:     Instance metadata service can be interacted with freely
  Resolution: Enable HTTP token requirement for IMDS

  More Info:
  - https://aquasecurity.github.io/tfsec/latest/checks/aws/ec2/enforce-http-token-imds 
  - https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/instance#metadata-options 
  - https://aws.amazon.com/blogs/security/defense-in-depth-open-firewalls-reverse-proxies-ssrf-vulnerabilities-ec2-instance-metadata-service 

  Result 4

  [aws-ec2-enforce-http-token-imds][HIGH] Resource 'aws_instance.example_with_new_ami' is missing `metadata_options` block - it is required with `http_tokens` set to `required` to make Instance Metadata Service more secure.
  /src/main.tf:45-48


      42 |   }
      43 | }
      44 | 
      45 | resource "aws_instance" "example_with_new_ami" {
      46 |   ami = aws_ami.example.id
      47 |   instance_type = "t3.nano"
      48 | }
      49 | 
      50 | /** Copying an existing AMI, making the new one private **/
      51 | 

  Legacy ID:  AWS079
  Impact:     Instance metadata service can be interacted with freely
  Resolution: Enable HTTP token requirement for IMDS

  More Info:
  - https://aquasecurity.github.io/tfsec/latest/checks/aws/ec2/enforce-http-token-imds 
  - https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/instance#metadata-options 
  - https://aws.amazon.com/blogs/security/defense-in-depth-open-firewalls-reverse-proxies-ssrf-vulnerabilities-ec2-instance-metadata-service 

  Result 5

  [aws-ec2-enforce-http-token-imds][HIGH] Resource 'aws_instance.example_with_copied_ami' is missing `metadata_options` block - it is required with `http_tokens` set to `required` to make Instance Metadata Service more secure.
  /src/main.tf:80-84


      77 |   }
      78 | }
      79 | 
      80 | resource "aws_instance" "example_with_copied_ami" {
      81 |   ami = aws_ami_copy.example.id
      82 |   instance_type = "t3.nano"
      83 |   
      84 | }
      85 | 
      86 | /** Create a private AMI from an EC2 instance **/
      87 | 

  Legacy ID:  AWS079
  Impact:     Instance metadata service can be interacted with freely
  Resolution: Enable HTTP token requirement for IMDS

  More Info:
  - https://aquasecurity.github.io/tfsec/latest/checks/aws/ec2/enforce-http-token-imds 
  - https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/instance#metadata-options 
  - https://aws.amazon.com/blogs/security/defense-in-depth-open-firewalls-reverse-proxies-ssrf-vulnerabilities-ec2-instance-metadata-service 

  Result 6

  [aws-ec2-enforce-http-token-imds][HIGH] Resource 'aws_instance.example_with_ami_from_instance' is missing `metadata_options` block - it is required with `http_tokens` set to `required` to make Instance Metadata Service more secure.
  /src/main.tf:93-96


      90 |   source_instance_id = aws_instance.example_with_copied_ami.id
      91 | }
      92 | 
      93 | resource "aws_instance" "example_with_ami_from_instance" {
      94 |   ami = aws_ami_from_instance.example.id
      95 |   instance_type = "t3.nano"
      96 | }
      97 | 
      98 | resource "aws_instance" "public-ubuntu-from-data" {
      99 |   ami           = data.aws_ami.ubuntu.id

  Legacy ID:  AWS079
  Impact:     Instance metadata service can be interacted with freely
  Resolution: Enable HTTP token requirement for IMDS

  More Info:
  - https://aquasecurity.github.io/tfsec/latest/checks/aws/ec2/enforce-http-token-imds 
  - https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/instance#metadata-options 
  - https://aws.amazon.com/blogs/security/defense-in-depth-open-firewalls-reverse-proxies-ssrf-vulnerabilities-ec2-instance-metadata-service 

  times
  ------------------------------------------
  disk i/o             30.848166ms
  parsing HCL          628.75Âµs
  evaluating values    5.224959ms
  running checks       28.984375ms

  counts
  ------------------------------------------
  files loaded         1
  blocks               13
  modules              0

  results
  ------------------------------------------
  critical             0
  high                 5
  medium               0
  low                  1
  ignored              0

  6 potential problems detected.

