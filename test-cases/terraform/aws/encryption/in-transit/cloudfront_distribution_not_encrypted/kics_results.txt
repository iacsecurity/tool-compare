[38;2;34;187;51m
                   .0MO.                                    
                   OMMMx                                    
                   ;NMX;                                    
                    ...           ...              ....     
WMMMd     cWMMM0.  KMMMO      ;xKWMMMMNOc.     ,xXMMMMMWXkc.
WMMMd   .0MMMN:    KMMMO    :XMMMMMMMMMMMWl   xMMMMMWMMMMMMl
WMMMd  lWMMMO.     KMMMO   xMMMMKc...'lXMk   ,MMMMx   .;dXx 
WMMMd.0MMMX;       KMMMO  cMMMMd        '    'MMMMNl'       
WMMMNWMMMMl        KMMMO  0MMMN               oMMMMMMMXkl.  
WMMMMMMMMMMo       KMMMO  0MMMX                .ckKWMMMMMM0.
WMMMMWokMMMMk      KMMMO  oMMMMc              .     .:OMMMM0
WMMMK.  dMMMM0.    KMMMO   KMMMMx'    ,kNc   :WOc.    .NMMMX
WMMMd    cWMMMX.   KMMMO    kMMMMMWXNMMMMMd .WMMMMWKO0NMMMMl
WMMMd     ,NMMMN,  KMMMO     'xNMMMMMMMNx,   .l0WMMMMMMMWk, 
xkkk:      ,kkkkx  okkkl        ;xKXKx;          ;dOKKkc    

[0m
Scanning with Keeping Infrastructure as Code Secure v1.6.5



Files scanned: 1
Parsed files: 1
Queries loaded: 1039
Queries failed to execute: 0

------------------------------------

[38;2;91;192;222mResource Not Using Tags[0m, Severity: [38;2;91;192;222mINFO[0m, Results: 2
[1mDescription:[0m AWS services resource tags are an essential part of managing components. As a best practice, the field 'tags' should have additional tags defined other than 'Name'
[1mPlatform:[0m Terraform

	[38;2;91;192;222m[1]:[0m ../../src/main.tf:[38;2;34;187;51m44[0m

		043: 
[38;2;240;173;78m		044: resource "aws_cloudfront_distribution" "s3_distribution" {
[0m		045:   enabled             = true


	[38;2;91;192;222m[2]:[0m ../../src/main.tf:[38;2;34;187;51m10[0m

		009: 
[38;2;240;173;78m		010: resource "aws_s3_bucket" "cdn-content" {
[0m		011:   bucket = local.name


[38;2;91;192;222mName Is Not Snake Case[0m, Severity: [38;2;91;192;222mINFO[0m, Results: 2
[1mDescription:[0m All names should follow snake case pattern.
[1mPlatform:[0m Terraform

	[38;2;91;192;222m[1]:[0m ../../src/main.tf:[38;2;34;187;51m10[0m

		009: 
[38;2;240;173;78m		010: resource "aws_s3_bucket" "cdn-content" {
[0m		011:   bucket = local.name


	[38;2;91;192;222m[2]:[0m ../../src/main.tf:[38;2;34;187;51m32[0m

		031: 
[38;2;240;173;78m		032: resource "aws_s3_bucket_public_access_block" "cdn-content" {
[0m		033:   bucket                  = aws_s3_bucket.cdn-content.id


[38;2;237;213;126mShield Advanced Not In Use[0m, Severity: [38;2;237;213;126mLOW[0m, Results: 1
[1mDescription:[0m AWS Shield Advanced should be used for Amazon Route 53 hosted zone, AWS Global Accelerator accelerator, Elastic IP Address, Elastic Load Balancing, and Amazon CloudFront Distribution to protect these resources against robust DDoS attacks
[1mPlatform:[0m Terraform

	[38;2;237;213;126m[1]:[0m ../../src/main.tf:[38;2;34;187;51m44[0m

		043: 
[38;2;240;173;78m		044: resource "aws_cloudfront_distribution" "s3_distribution" {
[0m		045:   enabled             = true


[38;2;237;213;126mIAM Access Analyzer Not Enabled[0m, Severity: [38;2;237;213;126mLOW[0m, Results: 1
[1mDescription:[0m IAM Access Analyzer should be enabled and configured to continuously monitor resource permissions
[1mPlatform:[0m Terraform

	[38;2;237;213;126m[1]:[0m ../../src/main.tf:[38;2;34;187;51m10[0m

		009: 
[38;2;240;173;78m		010: resource "aws_s3_bucket" "cdn-content" {
[0m		011:   bucket = local.name


[38;2;237;213;126mCloudFront Without WAF[0m, Severity: [38;2;237;213;126mLOW[0m, Results: 1
[1mDescription:[0m All AWS CloudFront distributions should be integrated with the Web Application Firewall (AWS WAF) service
[1mPlatform:[0m Terraform

	[38;2;237;213;126m[1]:[0m ../../src/main.tf:[38;2;34;187;51m44[0m

		043: 
[38;2;240;173;78m		044: resource "aws_cloudfront_distribution" "s3_distribution" {
[0m		045:   enabled             = true


[38;2;255;114;19mS3 Bucket Without Versioning[0m, Severity: [38;2;255;114;19mMEDIUM[0m, Results: 1
[1mDescription:[0m S3 bucket should have versioning enabled
[1mPlatform:[0m Terraform

	[38;2;255;114;19m[1]:[0m ../../src/main.tf:[38;2;34;187;51m10[0m

		009: 
[38;2;240;173;78m		010: resource "aws_s3_bucket" "cdn-content" {
[0m		011:   bucket = local.name


[38;2;255;114;19mS3 Bucket Policy Accepts HTTP Requests[0m, Severity: [38;2;255;114;19mMEDIUM[0m, Results: 1
[1mDescription:[0m S3 Bucket policy should not accept HTTP Requests
[1mPlatform:[0m Terraform

	[38;2;255;114;19m[1]:[0m ../../src/main.tf:[38;2;34;187;51m13[0m

		012:   acl    = "private"
[38;2;240;173;78m		013:   policy = <<POLICY
[0m		014: {


[38;2;255;114;19mS3 Bucket Logging Disabled[0m, Severity: [38;2;255;114;19mMEDIUM[0m, Results: 1
[1mDescription:[0m Server Access Logging should be enabled on S3 Buckets so that all changes are logged and trackable
[1mPlatform:[0m Terraform

	[38;2;255;114;19m[1]:[0m ../../src/main.tf:[38;2;34;187;51m10[0m

		009: 
[38;2;240;173;78m		010: resource "aws_s3_bucket" "cdn-content" {
[0m		011:   bucket = local.name


[38;2;255;114;19mCloudFront Logging Disabled[0m, Severity: [38;2;255;114;19mMEDIUM[0m, Results: 1
[1mDescription:[0m AWS CloudFront distributions should have logging enabled to collect all viewer requests, which means the attribute 'logging_config' should be defined
[1mPlatform:[0m Terraform

	[38;2;255;114;19m[1]:[0m ../../src/main.tf:[38;2;34;187;51m44[0m

		043: 
[38;2;240;173;78m		044: resource "aws_cloudfront_distribution" "s3_distribution" {
[0m		045:   enabled             = true


[38;2;187;33;36mVulnerable Default SSL Certificate[0m, Severity: [38;2;187;33;36mHIGH[0m, Results: 1
[1mDescription:[0m CloudFront web distributions should use custom (and not default) SSL certificates. Custom SSL certificates allow only defined users to access content by using an alternate domain name instead of the default one.
[1mPlatform:[0m Terraform

	[38;2;187;33;36m[1]:[0m ../../src/main.tf:[38;2;34;187;51m75[0m

		074: 
[38;2;240;173;78m		075:   viewer_certificate {
[0m		076:     cloudfront_default_certificate = true


[38;2;187;33;36mS3 Bucket Without Enabled MFA Delete[0m, Severity: [38;2;187;33;36mHIGH[0m, Results: 1
[1mCIS ID:[0m CIS Security - CIS Amazon Web Services Foundations Benchmark v1.4.0 - Rule 2.1.3
[1mTitle:[0m Ensure MFA Delete is enable on S3 buckets
[1mDescription:[0m Once MFA Delete is enabled on your sensitive and classified S3 bucket it requires the user to have two forms of authentication.
Adding MFA delete to an S3 bucket, requires additional authentication when you change the version state of your bucket or you delete and object version adding another layer of security in the event your security credentials are compromised or unauthorized access is granted.
[1mPlatform:[0m Terraform

	[38;2;187;33;36m[1]:[0m ../../src/main.tf:[38;2;34;187;51m10[0m

		009: 
[38;2;240;173;78m		010: resource "aws_s3_bucket" "cdn-content" {
[0m		011:   bucket = local.name


[38;2;187;33;36mS3 Bucket SSE Disabled[0m, Severity: [38;2;187;33;36mHIGH[0m, Results: 1
[1mDescription:[0m If algorithm is AES256 then the master key is null, empty or undefined, otherwise the master key is required
[1mPlatform:[0m Terraform

	[38;2;187;33;36m[1]:[0m ../../src/main.tf:[38;2;34;187;51m10[0m

		009: 
[38;2;240;173;78m		010: resource "aws_s3_bucket" "cdn-content" {
[0m		011:   bucket = local.name


[38;2;187;33;36mCloudfront Viewer Protocol Policy Allows HTTP[0m, Severity: [38;2;187;33;36mHIGH[0m, Results: 3
[1mDescription:[0m Checks if the connection between CloudFront and the viewer is encrypted
[1mPlatform:[0m Terraform

	[38;2;187;33;36m[1]:[0m ../../src/main.tf:[38;2;34;187;51m100[0m

		099:     target_origin_id       = local.s3_origin_id
[38;2;240;173;78m		100:     viewer_protocol_policy = "allow-all"
[0m		101: 


	[38;2;187;33;36m[2]:[0m ../../src/main.tf:[38;2;34;187;51m118[0m

		117:     target_origin_id       = local.s3_origin_id
[38;2;240;173;78m		118:     viewer_protocol_policy = "allow-all"
[0m		119: 


	[38;2;187;33;36m[3]:[0m ../../src/main.tf:[38;2;34;187;51m83[0m

		082:     target_origin_id       = local.s3_origin_id
[38;2;240;173;78m		083:     viewer_protocol_policy = "allow-all"
[0m		084: 


[38;2;187;33;36mCloudFront Without Minimum Protocol TLS 1.2[0m, Severity: [38;2;187;33;36mHIGH[0m, Results: 1
[1mDescription:[0m CloudFront Minimum Protocol version should be at least TLS 1.2
[1mPlatform:[0m Terraform

	[38;2;187;33;36m[1]:[0m ../../src/main.tf:[38;2;34;187;51m76[0m

		075:   viewer_certificate {
[38;2;240;173;78m		076:     cloudfront_default_certificate = true
[0m		077:   }



Results Summary:
[38;2;187;33;36mHIGH[0m: 7
[38;2;255;114;19mMEDIUM[0m: 4
[38;2;237;213;126mLOW[0m: 3
[38;2;91;192;222mINFO[0m: 4
TOTAL: 18

Scan duration: 13.702665881s
