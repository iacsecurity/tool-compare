[38;2;34;187;51m
                   .0MO.                                    
                   OMMMx                                    
                   ;NMX;                                    
                    ...           ...              ....     
WMMMd     cWMMM0.  KMMMO      ;xKWMMMMNOc.     ,xXMMMMMWXkc.
WMMMd   .0MMMN:    KMMMO    :XMMMMMMMMMMMWl   xMMMMMWMMMMMMl
WMMMd  lWMMMO.     KMMMO   xMMMMKc...'lXMk   ,MMMMx   .;dXx 
WMMMd.0MMMX;       KMMMO  cMMMMd        '    'MMMMNl'       
WMMMNWMMMMl        KMMMO  0MMMN               oMMMMMMMXkl.  
WMMMMMMMMMMo       KMMMO  0MMMX                .ckKWMMMMMM0.
WMMMMWokMMMMk      KMMMO  oMMMMc              .     .:OMMMM0
WMMMK.  dMMMM0.    KMMMO   KMMMMx'    ,kNc   :WOc.    .NMMMX
WMMMd    cWMMMX.   KMMMO    kMMMMMWXNMMMMMd .WMMMMWKO0NMMMMl
WMMMd     ,NMMMN,  KMMMO     'xNMMMMMMMNx,   .l0WMMMMMMMWk, 
xkkk:      ,kkkkx  okkkl        ;xKXKx;          ;dOKKkc    

[0m
Scanning with Keeping Infrastructure as Code Secure v1.6.5



Files scanned: 1
Parsed files: 1
Queries loaded: 1039
Queries failed to execute: 0

------------------------------------

[38;2;91;192;222mSecurity Group Rule Without Description[0m, Severity: [38;2;91;192;222mINFO[0m, Results: 1
[1mDescription:[0m It's considered a best practice for all rules in AWS Security Group to have a description
[1mPlatform:[0m Terraform

	[38;2;91;192;222m[1]:[0m ../../src/main.tf:[38;2;34;187;51m103[0m

		102: 
[38;2;240;173;78m		103:   egress {
[0m		104:     from_port   = 443


[38;2;91;192;222mResource Not Using Tags[0m, Severity: [38;2;91;192;222mINFO[0m, Results: 12
[1mDescription:[0m AWS services resource tags are an essential part of managing components. As a best practice, the field 'tags' should have additional tags defined other than 'Name'
[1mPlatform:[0m Terraform

	[38;2;91;192;222m[1]:[0m ../../src/main.tf:[38;2;34;187;51m15[0m

		014: 
[38;2;240;173;78m		015:   tags = {
[0m		016:     Name = "public-subnet"


	[38;2;91;192;222m[2]:[0m ../../src/main.tf:[38;2;34;187;51m143[0m

		142: 
[38;2;240;173;78m		143: resource "aws_dynamodb_table" "basic-dynamodb-table" {
[0m		144:   name           = "GameScores"


	[38;2;91;192;222m[3]:[0m ../../src/main.tf:[38;2;34;187;51m42[0m

		041: 
[38;2;240;173;78m		042:   tags = {
[0m		043:     Name = "private-subnet"


	[38;2;91;192;222m[4]:[0m ../../src/main.tf:[38;2;34;187;51m5[0m

		004: 
[38;2;240;173;78m		005: resource "aws_vpc" "main" {
[0m		006:   cidr_block = "192.168.100.0/24"


	[38;2;91;192;222m[5]:[0m ../../src/main.tf:[38;2;34;187;51m56[0m

		055: 
[38;2;240;173;78m		056: resource "aws_eip" "allocate-ip-to-nat-gw" {
[0m		057:   vpc      = true


	[38;2;91;192;222m[6]:[0m ../../src/main.tf:[38;2;34;187;51m115[0m

		114: 
[38;2;240;173;78m		115:   tags = {
[0m		116:     Name = "internet-gateway"


	[38;2;91;192;222m[7]:[0m ../../src/main.tf:[38;2;34;187;51m75[0m

		074: 
[38;2;240;173;78m		075:   tags = {
[0m		076:     Name = "private-rtb"


	[38;2;91;192;222m[8]:[0m ../../src/main.tf:[38;2;34;187;51m136[0m

		135: 
[38;2;240;173;78m		136: resource "aws_instance" "test" {
[0m		137:   ami = data.aws_ami.ubuntu.id


	[38;2;91;192;222m[9]:[0m ../../src/main.tf:[38;2;34;187;51m51[0m

		050: 
[38;2;240;173;78m		051:   tags = {
[0m		052:     Name = "gw NAT"


	[38;2;91;192;222m[10]:[0m ../../src/main.tf:[38;2;34;187;51m93[0m

		092: 
[38;2;240;173;78m		093:   tags = {
[0m		094:     Name = "allow-public-outbound-nacl"


	[38;2;91;192;222m[11]:[0m ../../src/main.tf:[38;2;34;187;51m28[0m

		027: 
[38;2;240;173;78m		028:   tags = {
[0m		029:     Name = "public-rtb"


	[38;2;91;192;222m[12]:[0m ../../src/main.tf:[38;2;34;187;51m98[0m

		097: 
[38;2;240;173;78m		098: resource "aws_security_group" "allow-public-outbound-sg" {
[0m		099:   name        = "allow-public-outbound-sg"


[38;2;91;192;222mName Is Not Snake Case[0m, Severity: [38;2;91;192;222mINFO[0m, Results: 12
[1mDescription:[0m All names should follow snake case pattern.
[1mPlatform:[0m Terraform

	[38;2;91;192;222m[1]:[0m ../../src/main.tf:[38;2;34;187;51m38[0m

		037: 
[38;2;240;173;78m		038: resource "aws_subnet" "private-subnet" {
[0m		039:   vpc_id     = aws_vpc.main.id


	[38;2;91;192;222m[2]:[0m ../../src/main.tf:[38;2;34;187;51m66[0m

		065: 
[38;2;240;173;78m		066: resource "aws_route_table" "private-rtb" {
[0m		067:   vpc_id = aws_vpc.main.id


	[38;2;91;192;222m[3]:[0m ../../src/main.tf:[38;2;34;187;51m80[0m

		079: 
[38;2;240;173;78m		080: resource "aws_network_acl" "allow-public-outbound-nacl" {
[0m		081:   vpc_id = aws_vpc.main.id


	[38;2;91;192;222m[4]:[0m ../../src/main.tf:[38;2;34;187;51m47[0m

		046: 
[38;2;240;173;78m		047: resource "aws_nat_gateway" "private-subnet-nat-gw" {
[0m		048:   allocation_id = aws_eip.allocate-ip-to-nat-gw.id


	[38;2;91;192;222m[5]:[0m ../../src/main.tf:[38;2;34;187;51m33[0m

		032: 
[38;2;240;173;78m		033: resource "aws_route_table_association" "public-rtb-assoc" {
[0m		034:   subnet_id      = aws_subnet.public-subnet.id


	[38;2;91;192;222m[6]:[0m ../../src/main.tf:[38;2;34;187;51m61[0m

		060: 
[38;2;240;173;78m		061: resource "aws_route_table_association" "private-rtb-assoc" {
[0m		062:   subnet_id      = aws_subnet.private-subnet.id


	[38;2;91;192;222m[7]:[0m ../../src/main.tf:[38;2;34;187;51m98[0m

		097: 
[38;2;240;173;78m		098: resource "aws_security_group" "allow-public-outbound-sg" {
[0m		099:   name        = "allow-public-outbound-sg"


	[38;2;91;192;222m[8]:[0m ../../src/main.tf:[38;2;34;187;51m56[0m

		055: 
[38;2;240;173;78m		056: resource "aws_eip" "allocate-ip-to-nat-gw" {
[0m		057:   vpc      = true


	[38;2;91;192;222m[9]:[0m ../../src/main.tf:[38;2;34;187;51m143[0m

		142: 
[38;2;240;173;78m		143: resource "aws_dynamodb_table" "basic-dynamodb-table" {
[0m		144:   name           = "GameScores"


	[38;2;91;192;222m[10]:[0m ../../src/main.tf:[38;2;34;187;51m112[0m

		111: 
[38;2;240;173;78m		112: resource "aws_internet_gateway" "internet-gateway" {
[0m		113:   vpc_id = aws_vpc.main.id


	[38;2;91;192;222m[11]:[0m ../../src/main.tf:[38;2;34;187;51m20[0m

		019: 
[38;2;240;173;78m		020: resource "aws_route_table" "public-rtb" {
[0m		021:   vpc_id = aws_vpc.main.id


	[38;2;91;192;222m[12]:[0m ../../src/main.tf:[38;2;34;187;51m10[0m

		009: 
[38;2;240;173;78m		010: resource "aws_subnet" "public-subnet" {
[0m		011:   vpc_id     = aws_vpc.main.id


[38;2;91;192;222mEC2 Not EBS Optimized[0m, Severity: [38;2;91;192;222mINFO[0m, Results: 1
[1mDescription:[0m It's considered a best practice for an EC2 instance to use an EBS optimized instance. This provides the best performance for your EBS volumes by minimizing contention between Amazon EBS I/O and other traffic from your instance
[1mPlatform:[0m Terraform

	[38;2;91;192;222m[1]:[0m ../../src/main.tf:[38;2;34;187;51m136[0m

		135: 
[38;2;240;173;78m		136: resource "aws_instance" "test" {
[0m		137:   ami = data.aws_ami.ubuntu.id


[38;2;91;192;222mEC2 Instance Monitoring Disabled[0m, Severity: [38;2;91;192;222mINFO[0m, Results: 1
[1mDescription:[0m EC2 Instance should have detailed monitoring enabled. With detailed monitoring enabled data is available in 1-minute periods
[1mPlatform:[0m Terraform

	[38;2;91;192;222m[1]:[0m ../../src/main.tf:[38;2;34;187;51m136[0m

		135: 
[38;2;240;173;78m		136: resource "aws_instance" "test" {
[0m		137:   ami = data.aws_ami.ubuntu.id


[38;2;91;192;222mDynamoDB Table Point In Time Recovery Disabled[0m, Severity: [38;2;91;192;222mINFO[0m, Results: 1
[1mDescription:[0m It's considered a best practice to have point in time recovery enabled for DynamoDB Table
[1mPlatform:[0m Terraform

	[38;2;91;192;222m[1]:[0m ../../src/main.tf:[38;2;34;187;51m143[0m

		142: 
[38;2;240;173;78m		143: resource "aws_dynamodb_table" "basic-dynamodb-table" {
[0m		144:   name           = "GameScores"


[38;2;237;213;126mVPC FlowLogs Disabled[0m, Severity: [38;2;237;213;126mLOW[0m, Results: 1
[1mDescription:[0m Every VPC resource should have an associated Flow Log
[1mPlatform:[0m Terraform

	[38;2;237;213;126m[1]:[0m ../../src/main.tf:[38;2;34;187;51m5[0m

		004: 
[38;2;240;173;78m		005: resource "aws_vpc" "main" {
[0m		006:   cidr_block = "192.168.100.0/24"


[38;2;237;213;126mShield Advanced Not In Use[0m, Severity: [38;2;237;213;126mLOW[0m, Results: 1
[1mDescription:[0m AWS Shield Advanced should be used for Amazon Route 53 hosted zone, AWS Global Accelerator accelerator, Elastic IP Address, Elastic Load Balancing, and Amazon CloudFront Distribution to protect these resources against robust DDoS attacks
[1mPlatform:[0m Terraform

	[38;2;237;213;126m[1]:[0m ../../src/main.tf:[38;2;34;187;51m56[0m

		055: 
[38;2;240;173;78m		056: resource "aws_eip" "allocate-ip-to-nat-gw" {
[0m		057:   vpc      = true


[38;2;237;213;126mIAM Access Analyzer Not Enabled[0m, Severity: [38;2;237;213;126mLOW[0m, Results: 1
[1mDescription:[0m IAM Access Analyzer should be enabled and configured to continuously monitor resource permissions
[1mPlatform:[0m Terraform

	[38;2;237;213;126m[1]:[0m ../../src/main.tf:[38;2;34;187;51m5[0m

		004: 
[38;2;240;173;78m		005: resource "aws_vpc" "main" {
[0m		006:   cidr_block = "192.168.100.0/24"


[38;2;255;114;19mVPC Without Network Firewall[0m, Severity: [38;2;255;114;19mMEDIUM[0m, Results: 1
[1mDescription:[0m VPC should have a Network Firewall associated
[1mPlatform:[0m Terraform

	[38;2;255;114;19m[1]:[0m ../../src/main.tf:[38;2;34;187;51m5[0m

		004: 
[38;2;240;173;78m		005: resource "aws_vpc" "main" {
[0m		006:   cidr_block = "192.168.100.0/24"


[38;2;255;114;19mVPC Subnet Assigns Public IP[0m, Severity: [38;2;255;114;19mMEDIUM[0m, Results: 1
[1mDescription:[0m VPC Subnet should not assign public IP
[1mPlatform:[0m Terraform

	[38;2;255;114;19m[1]:[0m ../../src/main.tf:[38;2;34;187;51m13[0m

		012:   cidr_block = "192.168.100.0/25"
[38;2;240;173;78m		013:   map_public_ip_on_launch = true
[0m		014: 


[38;2;255;114;19mDynamoDB Table Not Encrypted[0m, Severity: [38;2;255;114;19mMEDIUM[0m, Results: 1
[1mDescription:[0m AWS DynamoDB Tables should have server-side encryption
[1mPlatform:[0m Terraform

	[38;2;255;114;19m[1]:[0m ../../src/main.tf:[38;2;34;187;51m143[0m

		142: 
[38;2;240;173;78m		143: resource "aws_dynamodb_table" "basic-dynamodb-table" {
[0m		144:   name           = "GameScores"


[38;2;187;33;36mEC2 Instance Has Public IP[0m, Severity: [38;2;187;33;36mHIGH[0m, Results: 1
[1mDescription:[0m EC2 Instance should not have a public IP address.
[1mPlatform:[0m Terraform

	[38;2;187;33;36m[1]:[0m ../../src/main.tf:[38;2;34;187;51m136[0m

		135: 
[38;2;240;173;78m		136: resource "aws_instance" "test" {
[0m		137:   ami = data.aws_ami.ubuntu.id



Results Summary:
[38;2;187;33;36mHIGH[0m: 1
[38;2;255;114;19mMEDIUM[0m: 3
[38;2;237;213;126mLOW[0m: 3
[38;2;91;192;222mINFO[0m: 28
TOTAL: 35

Scan duration: 14.323748965s
