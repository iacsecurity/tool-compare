
                   .0MO.                                    
                   OMMMx                                    
                   ;NMX;                                    
                    ...           ...              ....     
WMMMd     cWMMM0.  KMMMO      ;xKWMMMMNOc.     ,xXMMMMMWXkc.
WMMMd   .0MMMN:    KMMMO    :XMMMMMMMMMMMWl   xMMMMMWMMMMMMl
WMMMd  lWMMMO.     KMMMO   xMMMMKc...'lXMk   ,MMMMx   .;dXx 
WMMMd.0MMMX;       KMMMO  cMMMMd        '    'MMMMNl'       
WMMMNWMMMMl        KMMMO  0MMMN               oMMMMMMMXkl.  
WMMMMMMMMMMo       KMMMO  0MMMX                .ckKWMMMMMM0.
WMMMMWokMMMMk      KMMMO  oMMMMc              .     .:OMMMM0
WMMMK.  dMMMM0.    KMMMO   KMMMMx'    ,kNc   :WOc.    .NMMMX
WMMMd    cWMMMX.   KMMMO    kMMMMMWXNMMMMMd .WMMMMWKO0NMMMMl
WMMMd     ,NMMMN,  KMMMO     'xNMMMMMMMNx,   .l0WMMMMMMMWk, 
xkkk:      ,kkkkx  okkkl        ;xKXKx;          ;dOKKkc    


Scanning with Keeping Infrastructure as Code Secure v1.4.9



Files scanned: 1
Parsed files: 1
Queries loaded: 851
Queries failed to execute: 0

------------------------------------

Security Group Rules Without Description, Severity: INFO, Results: 1
Description: It's considered a best practice for all rules in AWS Security Group to have a description
Platform: Terraform

	[1]: ../../src/main.tf:103

		102: 
		103:   egress {
		104:     from_port   = 443


Resource Not Using Tags, Severity: INFO, Results: 12
Description: AWS services resource tags are an essential part of managing components
Platform: Terraform

	[1]: ../../src/main.tf:143

		142: 
		143: resource "aws_dynamodb_table" "basic-dynamodb-table" {
		144:   name           = "GameScores"


	[2]: ../../src/main.tf:56

		055: 
		056: resource "aws_eip" "allocate-ip-to-nat-gw" {
		057:   vpc      = true


	[3]: ../../src/main.tf:28

		027: 
		028:   tags = {
		029:     Name = "public-rtb"


	[4]: ../../src/main.tf:115

		114: 
		115:   tags = {
		116:     Name = "internet-gateway"


	[5]: ../../src/main.tf:15

		014: 
		015:   tags = {
		016:     Name = "public-subnet"


	[6]: ../../src/main.tf:42

		041: 
		042:   tags = {
		043:     Name = "private-subnet"


	[7]: ../../src/main.tf:136

		135: 
		136: resource "aws_instance" "test" {
		137:   ami = data.aws_ami.ubuntu.id


	[8]: ../../src/main.tf:93

		092: 
		093:   tags = {
		094:     Name = "allow-public-outbound-nacl"


	[9]: ../../src/main.tf:51

		050: 
		051:   tags = {
		052:     Name = "gw NAT"


	[10]: ../../src/main.tf:75

		074: 
		075:   tags = {
		076:     Name = "private-rtb"


	[11]: ../../src/main.tf:5

		004: 
		005: resource "aws_vpc" "main" {
		006:   cidr_block = "192.168.100.0/24"


	[12]: ../../src/main.tf:98

		097: 
		098: resource "aws_security_group" "allow-public-outbound-sg" {
		099:   name        = "allow-public-outbound-sg"


Name Is Not Snake Case, Severity: INFO, Results: 12
Description: All names should follow snake case pattern.
Platform: Terraform

	[1]: ../../src/main.tf:66

		065: 
		066: resource "aws_route_table" "private-rtb" {
		067:   vpc_id = aws_vpc.main.id


	[2]: ../../src/main.tf:112

		111: 
		112: resource "aws_internet_gateway" "internet-gateway" {
		113:   vpc_id = aws_vpc.main.id


	[3]: ../../src/main.tf:47

		046: 
		047: resource "aws_nat_gateway" "private-subnet-nat-gw" {
		048:   allocation_id = aws_eip.allocate-ip-to-nat-gw.id


	[4]: ../../src/main.tf:10

		009: 
		010: resource "aws_subnet" "public-subnet" {
		011:   vpc_id     = aws_vpc.main.id


	[5]: ../../src/main.tf:98

		097: 
		098: resource "aws_security_group" "allow-public-outbound-sg" {
		099:   name        = "allow-public-outbound-sg"


	[6]: ../../src/main.tf:143

		142: 
		143: resource "aws_dynamodb_table" "basic-dynamodb-table" {
		144:   name           = "GameScores"


	[7]: ../../src/main.tf:20

		019: 
		020: resource "aws_route_table" "public-rtb" {
		021:   vpc_id = aws_vpc.main.id


	[8]: ../../src/main.tf:56

		055: 
		056: resource "aws_eip" "allocate-ip-to-nat-gw" {
		057:   vpc      = true


	[9]: ../../src/main.tf:38

		037: 
		038: resource "aws_subnet" "private-subnet" {
		039:   vpc_id     = aws_vpc.main.id


	[10]: ../../src/main.tf:33

		032: 
		033: resource "aws_route_table_association" "public-rtb-assoc" {
		034:   subnet_id      = aws_subnet.public-subnet.id


	[11]: ../../src/main.tf:80

		079: 
		080: resource "aws_network_acl" "allow-public-outbound-nacl" {
		081:   vpc_id = aws_vpc.main.id


	[12]: ../../src/main.tf:61

		060: 
		061: resource "aws_route_table_association" "private-rtb-assoc" {
		062:   subnet_id      = aws_subnet.private-subnet.id


EC2 Not EBS Optimized, Severity: INFO, Results: 1
Description: It's considered a best practice for an EC2 instance to use an EBS optimized instance. This provides the best performance for your EBS volumes by minimizing contention between Amazon EBS I/O and other traffic from your instance
Platform: Terraform

	[1]: ../../src/main.tf:136

		135: 
		136: resource "aws_instance" "test" {
		137:   ami = data.aws_ami.ubuntu.id


EC2 Instance Monitoring Disabled, Severity: INFO, Results: 1
Description: EC2 Instance should have detailed monitoring enabled. With detailed monitoring enabled data is available in 1-minute periods
Platform: Terraform

	[1]: ../../src/main.tf:136

		135: 
		136: resource "aws_instance" "test" {
		137:   ami = data.aws_ami.ubuntu.id


DynamoDB Table Point In Time Recovery Disabled, Severity: INFO, Results: 1
Description: It's considered a best practice to have point in time recovery enabled for DynamoDB Table
Platform: Terraform

	[1]: ../../src/main.tf:143

		142: 
		143: resource "aws_dynamodb_table" "basic-dynamodb-table" {
		144:   name           = "GameScores"


Shield Advanced Not In Use, Severity: LOW, Results: 1
Description: AWS Shield Advanced should be used for Amazon Route 53 hosted zone, AWS Global Accelerator accelerator, Elastic IP Address, Elastic Load Balancing, and Amazon CloudFront Distribution to protect these resources against robust DDoS attacks
Platform: Terraform

	[1]: ../../src/main.tf:56

		055: 
		056: resource "aws_eip" "allocate-ip-to-nat-gw" {
		057:   vpc      = true


VPC Without Network Firewall, Severity: MEDIUM, Results: 1
Description: VPC should have a Network Firewall associated
Platform: Terraform

	[1]: ../../src/main.tf:5

		004: 
		005: resource "aws_vpc" "main" {
		006:   cidr_block = "192.168.100.0/24"


VPC Subnet Assigns Public IP, Severity: MEDIUM, Results: 1
Description: VPC Subnet should not assign public IP
Platform: Terraform

	[1]: ../../src/main.tf:13

		012:   cidr_block = "192.168.100.0/25"
		013:   map_public_ip_on_launch = true
		014: 


VPC FlowLogs Disabled, Severity: MEDIUM, Results: 1
Description: VPC hasn't got any FlowLog associated
Platform: Terraform

	[1]: ../../src/main.tf:5

		004: 
		005: resource "aws_vpc" "main" {
		006:   cidr_block = "192.168.100.0/24"


DynamoDB Table Not Encrypted, Severity: MEDIUM, Results: 1
Description: AWS DynamoDB Tables should have server-side encryption
Platform: Terraform

	[1]: ../../src/main.tf:143

		142: 
		143: resource "aws_dynamodb_table" "basic-dynamodb-table" {
		144:   name           = "GameScores"


EC2 Instance Has Public IP, Severity: HIGH, Results: 1
Description: EC2 Instance should not have a public IP address.
Platform: Terraform

	[1]: ../../src/main.tf:136

		135: 
		136: resource "aws_instance" "test" {
		137:   ami = data.aws_ami.ubuntu.id



Results Summary:
HIGH: 1
MEDIUM: 4
LOW: 1
INFO: 28
TOTAL: 34

Scan duration: 9.169148087s
