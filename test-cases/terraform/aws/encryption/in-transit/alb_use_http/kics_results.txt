
                   .0MO.                                    
                   OMMMx                                    
                   ;NMX;                                    
                    ...           ...              ....     
WMMMd     cWMMM0.  KMMMO      ;xKWMMMMNOc.     ,xXMMMMMWXkc.
WMMMd   .0MMMN:    KMMMO    :XMMMMMMMMMMMWl   xMMMMMWMMMMMMl
WMMMd  lWMMMO.     KMMMO   xMMMMKc...'lXMk   ,MMMMx   .;dXx 
WMMMd.0MMMX;       KMMMO  cMMMMd        '    'MMMMNl'       
WMMMNWMMMMl        KMMMO  0MMMN               oMMMMMMMXkl.  
WMMMMMMMMMMo       KMMMO  0MMMX                .ckKWMMMMMM0.
WMMMMWokMMMMk      KMMMO  oMMMMc              .     .:OMMMM0
WMMMK.  dMMMM0.    KMMMO   KMMMMx'    ,kNc   :WOc.    .NMMMX
WMMMd    cWMMMX.   KMMMO    kMMMMMWXNMMMMMd .WMMMMWKO0NMMMMl
WMMMd     ,NMMMN,  KMMMO     'xNMMMMMMMNx,   .l0WMMMMMMMWk, 
xkkk:      ,kkkkx  okkkl        ;xKXKx;          ;dOKKkc    


Scanning with Keeping Infrastructure as Code Secure v1.3.1



Files scanned: 1
Parsed files: 1
Queries loaded: 559
Queries failed to execute: 0

------------------------------------

Resource Not Using Tags, Severity: INFO, Results: 9
Description: AWS services resource tags are an essential part of managing components
Platform: Terraform

	[1]: /src/main.tf:63

		062: 
		063: resource "aws_default_security_group" "dsg" {
		064:   vpc_id = aws_vpc.vpc1.id


	[2]: /src/main.tf:95

		094: 
		095: resource "aws_instance" "inst2" {
		096:   vpc_security_group_ids = [aws_default_security_group.dsg.id]


	[3]: /src/main.tf:108

		107: 
		108: resource "aws_instance" "inst3" {
		109:   vpc_security_group_ids = [aws_default_security_group.dsg.id]


	[4]: /src/main.tf:82

		081: 
		082: resource "aws_instance" "inst1" {
		083:   vpc_security_group_ids = [aws_default_security_group.dsg.id]


	[5]: /src/main.tf:26

		025: 
		026: resource "aws_vpc" "vpc1" {
		027:   cidr_block = "10.10.0.0/16"


	[6]: /src/main.tf:49

		048: 
		049: resource "aws_lb" "test" {
		050:   name = "test123"


	[7]: /src/main.tf:56

		055: 
		056: resource "aws_lb_target_group" "test" {
		057:   port = 80


	[8]: /src/main.tf:34

		033:   availability_zone_id = data.aws_availability_zones.available.zone_ids[0]
		034:   tags = {
		035:     Name = "subnet1"


	[9]: /src/main.tf:44

		043: 
		044:   tags = {
		045:     Name = "subnet2"


EC2 Not EBS Optimized, Severity: INFO, Results: 3
Description: It's considered a best practice for an EC2 instance to use an EBS optimized instance. This provides the best performance for your EBS volumes by minimizing contention between Amazon EBS I/O and other traffic from your instance
Platform: Terraform

	[1]: /src/main.tf:108

		107: 
		108: resource "aws_instance" "inst3" {
		109:   vpc_security_group_ids = [aws_default_security_group.dsg.id]


	[2]: /src/main.tf:82

		081: 
		082: resource "aws_instance" "inst1" {
		083:   vpc_security_group_ids = [aws_default_security_group.dsg.id]


	[3]: /src/main.tf:95

		094: 
		095: resource "aws_instance" "inst2" {
		096:   vpc_security_group_ids = [aws_default_security_group.dsg.id]


EC2 Instance Monitoring Disabled, Severity: INFO, Results: 3
Description: EC2 Instance should have detailed monitoring enabled. With detailed monitoring enabled data is available in 1-minute periods
Platform: Terraform

	[1]: /src/main.tf:95

		094: 
		095: resource "aws_instance" "inst2" {
		096:   vpc_security_group_ids = [aws_default_security_group.dsg.id]


	[2]: /src/main.tf:108

		107: 
		108: resource "aws_instance" "inst3" {
		109:   vpc_security_group_ids = [aws_default_security_group.dsg.id]


	[3]: /src/main.tf:82

		081: 
		082: resource "aws_instance" "inst1" {
		083:   vpc_security_group_ids = [aws_default_security_group.dsg.id]


VPC FlowLogs Disabled, Severity: MEDIUM, Results: 1
Description: VPC hasn't got any FlowLog associated
Platform: Terraform

	[1]: /src/main.tf:26

		025: 
		026: resource "aws_vpc" "vpc1" {
		027:   cidr_block = "10.10.0.0/16"


ALB Not Dropping Invalid Headers, Severity: MEDIUM, Results: 1
Description: It's considered a best practice when using Application Load Balancers to drop invalid header fields
Platform: Terraform

	[1]: /src/main.tf:49

		048: 
		049: resource "aws_lb" "test" {
		050:   name = "test123"


EC2 Instance Has Public IP, Severity: HIGH, Results: 3
Description: EC2 Instance should not have a public IP address.
Platform: Terraform

	[1]: /src/main.tf:108

		107: 
		108: resource "aws_instance" "inst3" {
		109:   vpc_security_group_ids = [aws_default_security_group.dsg.id]


	[2]: /src/main.tf:82

		081: 
		082: resource "aws_instance" "inst1" {
		083:   vpc_security_group_ids = [aws_default_security_group.dsg.id]


	[3]: /src/main.tf:95

		094: 
		095: resource "aws_instance" "inst2" {
		096:   vpc_security_group_ids = [aws_default_security_group.dsg.id]


ALB Listening on HTTP, Severity: HIGH, Results: 1
Description: AWS Application Load Balancer (alb) should not listen on HTTP
Platform: Terraform

	[1]: /src/main.tf:70

		069:   port = 80
		070:   default_action {
		071:     type             = "forward"



Results Summary:
HIGH: 4
MEDIUM: 2
LOW: 0
INFO: 15
TOTAL: 21

Scan duration: 3.940487785s
